(()=>{var t={669:(t,e,n)=>{t.exports=n(609)},448:(t,e,n)=>{"use strict";var r=n(867),a=n(26),o=n(327),s=n(97),i=n(109),c=n(985),u=n(61);t.exports=function(t){return new Promise((function(e,p){var l=t.data,d=t.headers;r.isFormData(l)&&delete d["Content-Type"];var f=new XMLHttpRequest;if(t.auth){var h=t.auth.username||"",m=t.auth.password||"";d.Authorization="Basic "+btoa(h+":"+m)}var w=s(t.baseURL,t.url);if(f.open(t.method.toUpperCase(),o(w,t.params,t.paramsSerializer),!0),f.timeout=t.timeout,f.onreadystatechange=function(){if(f&&4===f.readyState&&(0!==f.status||f.responseURL&&0===f.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in f?i(f.getAllResponseHeaders()):null,r={data:t.responseType&&"text"!==t.responseType?f.response:f.responseText,status:f.status,statusText:f.statusText,headers:n,config:t,request:f};a(e,p,r),f=null}},f.onabort=function(){f&&(p(u("Request aborted",t,"ECONNABORTED",f)),f=null)},f.onerror=function(){p(u("Network Error",t,null,f)),f=null},f.ontimeout=function(){var e="timeout of "+t.timeout+"ms exceeded";t.timeoutErrorMessage&&(e=t.timeoutErrorMessage),p(u(e,t,"ECONNABORTED",f)),f=null},r.isStandardBrowserEnv()){var v=n(372),y=(t.withCredentials||c(w))&&t.xsrfCookieName?v.read(t.xsrfCookieName):void 0;y&&(d[t.xsrfHeaderName]=y)}if("setRequestHeader"in f&&r.forEach(d,(function(t,e){void 0===l&&"content-type"===e.toLowerCase()?delete d[e]:f.setRequestHeader(e,t)})),r.isUndefined(t.withCredentials)||(f.withCredentials=!!t.withCredentials),t.responseType)try{f.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&f.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&f.upload&&f.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then((function(t){f&&(f.abort(),p(t),f=null)})),void 0===l&&(l=null),f.send(l)}))}},609:(t,e,n)=>{"use strict";var r=n(867),a=n(849),o=n(321),s=n(185);function i(t){var e=new o(t),n=a(o.prototype.request,e);return r.extend(n,o.prototype,e),r.extend(n,e),n}var c=i(n(655));c.Axios=o,c.create=function(t){return i(s(c.defaults,t))},c.Cancel=n(263),c.CancelToken=n(972),c.isCancel=n(502),c.all=function(t){return Promise.all(t)},c.spread=n(713),t.exports=c,t.exports.default=c},263:t=>{"use strict";function e(t){this.message=t}e.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},e.prototype.__CANCEL__=!0,t.exports=e},972:(t,e,n)=>{"use strict";var r=n(263);function a(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise((function(t){e=t}));var n=this;t((function(t){n.reason||(n.reason=new r(t),e(n.reason))}))}a.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},a.source=function(){var t;return{token:new a((function(e){t=e})),cancel:t}},t.exports=a},502:t=>{"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},321:(t,e,n)=>{"use strict";var r=n(867),a=n(327),o=n(782),s=n(572),i=n(185);function c(t){this.defaults=t,this.interceptors={request:new o,response:new o}}c.prototype.request=function(t){"string"==typeof t?(t=arguments[1]||{}).url=arguments[0]:t=t||{},(t=i(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var e=[s,void 0],n=Promise.resolve(t);for(this.interceptors.request.forEach((function(t){e.unshift(t.fulfilled,t.rejected)})),this.interceptors.response.forEach((function(t){e.push(t.fulfilled,t.rejected)}));e.length;)n=n.then(e.shift(),e.shift());return n},c.prototype.getUri=function(t){return t=i(this.defaults,t),a(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(t){c.prototype[t]=function(e,n){return this.request(r.merge(n||{},{method:t,url:e}))}})),r.forEach(["post","put","patch"],(function(t){c.prototype[t]=function(e,n,a){return this.request(r.merge(a||{},{method:t,url:e,data:n}))}})),t.exports=c},782:(t,e,n)=>{"use strict";var r=n(867);function a(){this.handlers=[]}a.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},a.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},a.prototype.forEach=function(t){r.forEach(this.handlers,(function(e){null!==e&&t(e)}))},t.exports=a},97:(t,e,n)=>{"use strict";var r=n(793),a=n(303);t.exports=function(t,e){return t&&!r(e)?a(t,e):e}},61:(t,e,n)=>{"use strict";var r=n(481);t.exports=function(t,e,n,a,o){var s=new Error(t);return r(s,e,n,a,o)}},572:(t,e,n)=>{"use strict";var r=n(867),a=n(527),o=n(502),s=n(655);function i(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return i(t),t.headers=t.headers||{},t.data=a(t.data,t.headers,t.transformRequest),t.headers=r.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete t.headers[e]})),(t.adapter||s.adapter)(t).then((function(e){return i(t),e.data=a(e.data,e.headers,t.transformResponse),e}),(function(e){return o(e)||(i(t),e&&e.response&&(e.response.data=a(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)}))}},481:t=>{"use strict";t.exports=function(t,e,n,r,a){return t.config=e,n&&(t.code=n),t.request=r,t.response=a,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},185:(t,e,n)=>{"use strict";var r=n(867);t.exports=function(t,e){e=e||{};var n={},a=["url","method","params","data"],o=["headers","auth","proxy"],s=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(a,(function(t){void 0!==e[t]&&(n[t]=e[t])})),r.forEach(o,(function(a){r.isObject(e[a])?n[a]=r.deepMerge(t[a],e[a]):void 0!==e[a]?n[a]=e[a]:r.isObject(t[a])?n[a]=r.deepMerge(t[a]):void 0!==t[a]&&(n[a]=t[a])})),r.forEach(s,(function(r){void 0!==e[r]?n[r]=e[r]:void 0!==t[r]&&(n[r]=t[r])}));var i=a.concat(o).concat(s),c=Object.keys(e).filter((function(t){return-1===i.indexOf(t)}));return r.forEach(c,(function(r){void 0!==e[r]?n[r]=e[r]:void 0!==t[r]&&(n[r]=t[r])})),n}},26:(t,e,n)=>{"use strict";var r=n(61);t.exports=function(t,e,n){var a=n.config.validateStatus;!a||a(n.status)?t(n):e(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},527:(t,e,n)=>{"use strict";var r=n(867);t.exports=function(t,e,n){return r.forEach(n,(function(n){t=n(t,e)})),t}},655:(t,e,n)=>{"use strict";var r=n(867),a=n(16),o={"Content-Type":"application/x-www-form-urlencoded"};function s(t,e){!r.isUndefined(t)&&r.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var i,c={adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(i=n(448)),i),transformRequest:[function(t,e){return a(e,"Accept"),a(e,"Content-Type"),r.isFormData(t)||r.isArrayBuffer(t)||r.isBuffer(t)||r.isStream(t)||r.isFile(t)||r.isBlob(t)?t:r.isArrayBufferView(t)?t.buffer:r.isURLSearchParams(t)?(s(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):r.isObject(t)?(s(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(t){c.headers[t]={}})),r.forEach(["post","put","patch"],(function(t){c.headers[t]=r.merge(o)})),t.exports=c},849:t=>{"use strict";t.exports=function(t,e){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return t.apply(e,n)}}},327:(t,e,n)=>{"use strict";var r=n(867);function a(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,n){if(!e)return t;var o;if(n)o=n(e);else if(r.isURLSearchParams(e))o=e.toString();else{var s=[];r.forEach(e,(function(t,e){null!=t&&(r.isArray(t)?e+="[]":t=[t],r.forEach(t,(function(t){r.isDate(t)?t=t.toISOString():r.isObject(t)&&(t=JSON.stringify(t)),s.push(a(e)+"="+a(t))})))})),o=s.join("&")}if(o){var i=t.indexOf("#");-1!==i&&(t=t.slice(0,i)),t+=(-1===t.indexOf("?")?"?":"&")+o}return t}},303:t=>{"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},372:(t,e,n)=>{"use strict";var r=n(867);t.exports=r.isStandardBrowserEnv()?{write:function(t,e,n,a,o,s){var i=[];i.push(t+"="+encodeURIComponent(e)),r.isNumber(n)&&i.push("expires="+new Date(n).toGMTString()),r.isString(a)&&i.push("path="+a),r.isString(o)&&i.push("domain="+o),!0===s&&i.push("secure"),document.cookie=i.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:t=>{"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},985:(t,e,n)=>{"use strict";var r=n(867);t.exports=r.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function a(t){var r=t;return e&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return t=a(window.location.href),function(e){var n=r.isString(e)?a(e):e;return n.protocol===t.protocol&&n.host===t.host}}():function(){return!0}},16:(t,e,n)=>{"use strict";var r=n(867);t.exports=function(t,e){r.forEach(t,(function(n,r){r!==e&&r.toUpperCase()===e.toUpperCase()&&(t[e]=n,delete t[r])}))}},109:(t,e,n)=>{"use strict";var r=n(867),a=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,n,o,s={};return t?(r.forEach(t.split("\n"),(function(t){if(o=t.indexOf(":"),e=r.trim(t.substr(0,o)).toLowerCase(),n=r.trim(t.substr(o+1)),e){if(s[e]&&a.indexOf(e)>=0)return;s[e]="set-cookie"===e?(s[e]?s[e]:[]).concat([n]):s[e]?s[e]+", "+n:n}})),s):s}},713:t=>{"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},867:(t,e,n)=>{"use strict";var r=n(849),a=Object.prototype.toString;function o(t){return"[object Array]"===a.call(t)}function s(t){return void 0===t}function i(t){return null!==t&&"object"==typeof t}function c(t){return"[object Function]"===a.call(t)}function u(t,e){if(null!=t)if("object"!=typeof t&&(t=[t]),o(t))for(var n=0,r=t.length;n<r;n++)e.call(null,t[n],n,t);else for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&e.call(null,t[a],a,t)}t.exports={isArray:o,isArrayBuffer:function(t){return"[object ArrayBuffer]"===a.call(t)},isBuffer:function(t){return null!==t&&!s(t)&&null!==t.constructor&&!s(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:i,isUndefined:s,isDate:function(t){return"[object Date]"===a.call(t)},isFile:function(t){return"[object File]"===a.call(t)},isBlob:function(t){return"[object Blob]"===a.call(t)},isFunction:c,isStream:function(t){return i(t)&&c(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:u,merge:function t(){var e={};function n(n,r){"object"==typeof e[r]&&"object"==typeof n?e[r]=t(e[r],n):e[r]=n}for(var r=0,a=arguments.length;r<a;r++)u(arguments[r],n);return e},deepMerge:function t(){var e={};function n(n,r){"object"==typeof e[r]&&"object"==typeof n?e[r]=t(e[r],n):e[r]="object"==typeof n?t({},n):n}for(var r=0,a=arguments.length;r<a;r++)u(arguments[r],n);return e},extend:function(t,e,n){return u(e,(function(e,a){t[a]=n&&"function"==typeof e?r(e,n):e})),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")}}},433:(t,e,n)=>{"use strict";n.d(e,{Z:()=>i});var r=n(537),a=n.n(r),o=n(645),s=n.n(o)()(a());s.push([t.id,"*{box-sizing:border-box}body{font-family:monospace;font-size:2rem;text-align:center}.tabs{display:flex;flex-direction:row;justify-content:flex-start;align-items:center}button{display:flex;margin:5px;width:120px;background:#fff;border:none;padding:5px 10px;cursor:pointer}ul{list-style-type:none}","",{version:3,sources:["webpack://./public/static/css/style.scss"],names:[],mappings:"AAAA,EACC,qBAAA,CAED,KACC,qBAAA,CACA,cAAA,CACA,iBAAA,CAGD,MACC,YAAA,CACA,kBAAA,CACA,0BAAA,CACA,kBAAA,CAGD,OACC,YAAA,CACG,UAAA,CACH,WAAA,CACA,eAAA,CACA,WAAA,CACA,gBAAA,CACA,cAAA,CAGD,GACI,oBAAA",sourcesContent:["* {\n\tbox-sizing: border-box;\n}\nbody {\n\tfont-family: monospace;\n\tfont-size: 2rem;\n\ttext-align: center;\n}\n\n.tabs {\n\tdisplay: flex;\n\tflex-direction: row; \n\tjustify-content: flex-start; \n\talign-items: center;\n}\n\nbutton {\n\tdisplay: flex;\n    margin: 5px;\n\twidth: 120px;\n\tbackground: #fff;\n\tborder: none;\n\tpadding: 5px 10px;\n\tcursor: pointer;\t\n}\n\nul {\n    list-style-type: none;\n}\n\n"],sourceRoot:""}]);const i=s},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,a,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var u=0;u<t.length;u++){var p=[].concat(t[u]);r&&s[p[0]]||(void 0!==o&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=o),n&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=n):p[2]=n),a&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=a):p[4]="".concat(a)),e.push(p))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),s=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(s).concat([o]).join("\n")}return[e].join("\n")}},24:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>v});var r=n(379),a=n.n(r),o=n(795),s=n.n(o),i=n(569),c=n.n(i),u=n(565),p=n.n(u),l=n(216),d=n.n(l),f=n(589),h=n.n(f),m=n(433),w={};w.styleTagTransform=h(),w.setAttributes=p(),w.insert=c().bind(null,"head"),w.domAPI=s(),w.insertStyleElement=d(),a()(m.Z,w);const v=m.Z&&m.Z.locals?m.Z.locals:void 0},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},s=[],i=0;i<t.length;i++){var c=t[i],u=r.base?c[0]+r.base:c[0],p=o[u]||0,l="".concat(u," ").concat(p);o[u]=p+1;var d=n(l),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)e[d].references++,e[d].updater(f);else{var h=a(f,r);r.byIndex=i,e.splice(i,0,{identifier:l,updater:h,references:1})}s.push(l)}return s}function a(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,a){var o=r(t=t||[],a=a||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var i=n(o[s]);e[i].references--}for(var c=r(t,a),u=0;u<o.length;u++){var p=n(o[u]);0===e[p].references&&(e[p].updater(),e.splice(p,1))}o=c}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},281:(t,e,n)=>{const r=n(669);var a=1;function o(t){return t?t.split(" ").join("_"):t}t.exports={setApiKey(t){a=t},getTeamByName:async t=>(t=o(t),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchteams.php?t=${t}`)).data),getTeamByShortCode:async t=>(t=o(t),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchteams.php?sname=${t}`)).data),getAllPlayersByTeam:async t=>(t=o(t),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchplayers.php?t=${t}`)).data),async getPlayerByName(t,e){t=o(t),e=o(e);var n=[];return n.push(`p=${t}`),e&&n.push(`t=${e}`),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchplayers.php?${n.join("&")}`)).data},async getEventByName(t,e){t=o(t),e=o(e);var n=[];return n.push(`e=${t}`),e&&n.push(`s=${e}`),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchevents.php?${n.join("&")}`)).data},getSportsList:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/all_sports.php`)).data,getLeagueList:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/all_leagues.php`)).data,getCountryList:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/all_countries.php`)).data,async getLeagueListByCountry(t,e){t=o(t),e=o(e);var n=[];return n.push(`c=${t}`),e&&n.push(`s=${e}`),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/search_all_leagues.php?${n.join("&")}`)).data},getSeasonsInLeagueById:async t=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/search_all_seasons.php?id=${t}`)).data,getTeamsByLeagueName:async t=>(t=o(t),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/search_all_teams.php?l=${t}`)).data),getTeamsByLeagueName:async t=>(t=o(t),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/search_all_teams.php?l=${t}`)).data),getTeamsByCountryAndSport:async(t,e)=>(e=o(e),t=o(t),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/search_all_teams.php?s=${t}&c=${e}`)).data),getPlayersByTeamId:async t=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookup_all_players.php?id=${t}`)).data,getUsersLoved:async t=>(t=o(t),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchloves.php?u=${t}`)).data),getLeagueDetailsById:async t=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupleague.php?id=${t}`)).data,getTeamDetailsById:async t=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupteam.php?id=${t}`)).data,getPlayerDetailsById:async t=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupplayer.php?id=${t}`)).data,getEventDetailsById:async t=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupevent.php?id=${t}`)).data,getPlayerHonoursById:async t=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookuphonors.php?id=${t}`)).data,getPlayerFormerTeamsById:async t=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupformerteams.php?id=${t}`)).data,getPlayerContractsById:async t=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupcontracts.php?id=${t}`)).data,getEventResultsById:async t=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventresults.php?id=${t}`)).data,getTvEventById:async t=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookuptv.php?id=${t}`)).data,getLookupTableByLeagueIdAndSeason:async(t,e)=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookuptable.php?l=${t}&s=${e}`)).data,getNext5EventsByTeamId:async t=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsnext.php?id=${t}`)).data,getNext15EventsByLeagueId:async t=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsnext.php?id=${t}`)).data,getPast5EventsByTeamId:async t=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventslast.php?id=${t}`)).data,getPast15EventsByLeagueId:async t=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventspastleague.php?id=${t}`)).data,getEventsInRound:async(t,e,n)=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsround.php?id=${t}&r=${e}&s=${n}`)).data,async getEventsOnDay(t,e,n){e=o(e),n=o(n);var s=[];return t&&s.push(`d=${t}`),n&&s.push(`l=${n}`),e&&s.push(`s=${e}`),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsday.php?${s.join("&")}`)).data},async getTvEventsOnDay(t,e,n){e=o(e),n=o(n);var s=[];return t&&s.push(`d=${t}`),n&&s.push(`a=${league}`),e&&s.push(`s=${e}`),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventstv.php?${s.join("&")}`)).data},getTvEventsByChannel:async t=>(t=o(t),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventstv.php?c=${t}`)).data),getEventsByLeagueIdAndSeason:async(t,e)=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsseason.php?id=${t}&s=${e}`)).data,getImage:async t=>(await r.get(`https://www.thesportsdb.com/images/media/league/fanart/${t}.jpg`)).data,getPreviewImage:async t=>(await r.get(`https://www.thesportsdb.com/images/media/league/fanart/${t}.jpg/preview`)).data,async getYoutubeEventHighligts(t,e,n){e=o(e),n=o(n);var s=[];return t&&s.push(`d=${t}`),e&&s.push(`l=${e}`),n&&s.push(`s=${n}`),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventshighlights.php?${s.join("&")}`)).data},getAllEventsByLeagueIdAndSeason:async(t,e)=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsseason.php?id=${t}&s=${e}`)).data,getSoccerLivescores:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/latestsoccer.php`)).data,getLivescoresBySport:async t=>(t=o(t),(await r.get(`https://www.thesportsdb.com/api/v2/json/${a}/livescore.php?s=${t}`)).data),getGolfLivescores:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/latestgolf.php`)).data,getBasketballLivescores:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/latestbasketball.php`)).data,getAmericanFootballLivescores:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/latestamericanfootball.php`)).data}},607:function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(a,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function i(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,i)}c((r=r.apply(t,e||[])).next())}))},a=this&&this.__generator||function(t,e){var n,r,a,o,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(o){return function(i){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((a=(a=s.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){s.label=o[1];break}if(6===o[0]&&s.label<a[1]){s.label=a[1],a=o;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(o);break}a[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,i])}}};Object.defineProperty(e,"__esModule",{value:!0}),n(24);var o=n(694);r(void 0,void 0,void 0,(function(){var t,e,n;return a(this,(function(r){switch(r.label){case 0:return[4,(0,o.getLeaguesNames)()];case 1:return t=r.sent(),e=document.createElement("div"),(n=document.createElement("ul")).classList.add("tabs"),t.forEach((function(e){var r=document.createElement("li"),a=document.createElement("button");a.tabIndex=t.indexOf(e),a.textContent=e,r.appendChild(a),n.appendChild(r)})),e.appendChild(n),document.body.appendChild(e),[2]}}))}))},694:function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(a,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function i(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,i)}c((r=r.apply(t,e||[])).next())}))},a=this&&this.__generator||function(t,e){var n,r,a,o,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(o){return function(i){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((a=(a=s.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){s.label=o[1];break}if(6===o[0]&&s.label<a[1]){s.label=a[1],a=o;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(o);break}a[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,i])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.getLeaguesNames=void 0;var o=n(281);e.getLeaguesNames=function(){return r(void 0,void 0,void 0,(function(){var t;return a(this,(function(e){switch(e.label){case 0:return t=[],o.setApiKey(2),[4,o.getLeagueListByCountry("Brazil","Soccer")];case 1:return e.sent().countries.forEach((function(e){t.push(e.strLeague)})),[2,t]}}))}))}}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nc=void 0,n(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,