(()=>{var e={669:(e,t,n)=>{e.exports=n(609)},448:(e,t,n)=>{"use strict";var r=n(867),a=n(26),o=n(327),s=n(97),i=n(109),c=n(985),u=n(61);e.exports=function(e){return new Promise((function(t,p){var l=e.data,d=e.headers;r.isFormData(l)&&delete d["Content-Type"];var f=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",m=e.auth.password||"";d.Authorization="Basic "+btoa(h+":"+m)}var v=s(e.baseURL,e.url);if(f.open(e.method.toUpperCase(),o(v,e.params,e.paramsSerializer),!0),f.timeout=e.timeout,f.onreadystatechange=function(){if(f&&4===f.readyState&&(0!==f.status||f.responseURL&&0===f.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in f?i(f.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?f.response:f.responseText,status:f.status,statusText:f.statusText,headers:n,config:e,request:f};a(t,p,r),f=null}},f.onabort=function(){f&&(p(u("Request aborted",e,"ECONNABORTED",f)),f=null)},f.onerror=function(){p(u("Network Error",e,null,f)),f=null},f.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),p(u(t,e,"ECONNABORTED",f)),f=null},r.isStandardBrowserEnv()){var g=n(372),w=(e.withCredentials||c(v))&&e.xsrfCookieName?g.read(e.xsrfCookieName):void 0;w&&(d[e.xsrfHeaderName]=w)}if("setRequestHeader"in f&&r.forEach(d,(function(e,t){void 0===l&&"content-type"===t.toLowerCase()?delete d[t]:f.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(f.withCredentials=!!e.withCredentials),e.responseType)try{f.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&f.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&f.upload&&f.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){f&&(f.abort(),p(e),f=null)})),void 0===l&&(l=null),f.send(l)}))}},609:(e,t,n)=>{"use strict";var r=n(867),a=n(849),o=n(321),s=n(185);function i(e){var t=new o(e),n=a(o.prototype.request,t);return r.extend(n,o.prototype,t),r.extend(n,t),n}var c=i(n(655));c.Axios=o,c.create=function(e){return i(s(c.defaults,e))},c.Cancel=n(263),c.CancelToken=n(972),c.isCancel=n(502),c.all=function(e){return Promise.all(e)},c.spread=n(713),e.exports=c,e.exports.default=c},263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},972:(e,t,n)=>{"use strict";var r=n(263);function a(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}a.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},a.source=function(){var e;return{token:new a((function(t){e=t})),cancel:e}},e.exports=a},502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(867),a=n(327),o=n(782),s=n(572),i=n(185);function c(e){this.defaults=e,this.interceptors={request:new o,response:new o}}c.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=i(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[s,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},c.prototype.getUri=function(e){return e=i(this.defaults,e),a(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){c.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){c.prototype[e]=function(t,n,a){return this.request(r.merge(a||{},{method:e,url:t,data:n}))}})),e.exports=c},782:(e,t,n)=>{"use strict";var r=n(867);function a(){this.handlers=[]}a.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},a.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},a.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=a},97:(e,t,n)=>{"use strict";var r=n(793),a=n(303);e.exports=function(e,t){return e&&!r(t)?a(e,t):t}},61:(e,t,n)=>{"use strict";var r=n(481);e.exports=function(e,t,n,a,o){var s=new Error(e);return r(s,t,n,a,o)}},572:(e,t,n)=>{"use strict";var r=n(867),a=n(527),o=n(502),s=n(655);function i(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return i(e),e.headers=e.headers||{},e.data=a(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||s.adapter)(e).then((function(t){return i(e),t.data=a(t.data,t.headers,e.transformResponse),t}),(function(t){return o(t)||(i(e),t&&t.response&&(t.response.data=a(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,n,r,a){return e.config=t,n&&(e.code=n),e.request=r,e.response=a,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},185:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t){t=t||{};var n={},a=["url","method","params","data"],o=["headers","auth","proxy"],s=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(a,(function(e){void 0!==t[e]&&(n[e]=t[e])})),r.forEach(o,(function(a){r.isObject(t[a])?n[a]=r.deepMerge(e[a],t[a]):void 0!==t[a]?n[a]=t[a]:r.isObject(e[a])?n[a]=r.deepMerge(e[a]):void 0!==e[a]&&(n[a]=e[a])})),r.forEach(s,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])}));var i=a.concat(o).concat(s),c=Object.keys(t).filter((function(e){return-1===i.indexOf(e)}));return r.forEach(c,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])})),n}},26:(e,t,n)=>{"use strict";var r=n(61);e.exports=function(e,t,n){var a=n.config.validateStatus;!a||a(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},527:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},655:(e,t,n)=>{"use strict";var r=n(867),a=n(16),o={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var i,c={adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(i=n(448)),i),transformRequest:[function(e,t){return a(t,"Accept"),a(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(s(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){c.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){c.headers[e]=r.merge(o)})),e.exports=c},849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},327:(e,t,n)=>{"use strict";var r=n(867);function a(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var o;if(n)o=n(t);else if(r.isURLSearchParams(t))o=t.toString();else{var s=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),s.push(a(t)+"="+a(e))})))})),o=s.join("&")}if(o){var i=e.indexOf("#");-1!==i&&(e=e.slice(0,i)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}},303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},372:(e,t,n)=>{"use strict";var r=n(867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,a,o,s){var i=[];i.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&i.push("expires="+new Date(n).toGMTString()),r.isString(a)&&i.push("path="+a),r.isString(o)&&i.push("domain="+o),!0===s&&i.push("secure"),document.cookie=i.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},985:(e,t,n)=>{"use strict";var r=n(867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function a(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=a(window.location.href),function(t){var n=r.isString(t)?a(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},16:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},109:(e,t,n)=>{"use strict";var r=n(867),a=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,o,s={};return e?(r.forEach(e.split("\n"),(function(e){if(o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t){if(s[t]&&a.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([n]):s[t]?s[t]+", "+n:n}})),s):s}},713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},867:(e,t,n)=>{"use strict";var r=n(849),a=Object.prototype.toString;function o(e){return"[object Array]"===a.call(e)}function s(e){return void 0===e}function i(e){return null!==e&&"object"==typeof e}function c(e){return"[object Function]"===a.call(e)}function u(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),o(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.call(null,e[a],a,e)}e.exports={isArray:o,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:function(e){return null!==e&&!s(e)&&null!==e.constructor&&!s(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:i,isUndefined:s,isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:c,isStream:function(e){return i(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:u,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,a=arguments.length;r<a;r++)u(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,a=arguments.length;r<a;r++)u(arguments[r],n);return t},extend:function(e,t,n){return u(t,(function(t,a){e[a]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},433:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(537),a=n.n(r),o=n(645),s=n.n(o)()(a());s.push([e.id,'*{box-sizing:border-box}body{font-family:"Gill Sans","Gill Sans MT",Calibri,"Trebuchet MS",sans-serif;font-size:1rem;text-align:center}.tabs{display:flex;flex-direction:row;justify-content:flex-start;align-items:center}.teams-container{display:flex;flex-direction:column;justify-content:flex-start;align-items:center}.logo-container{width:100px}button{font-family:"Gill Sans","Gill Sans MT",Calibri,"Trebuchet MS",sans-serif;display:flex;margin:5px;width:120px;background:#fff;border:none;padding:5px 10px;cursor:pointer}ul{list-style-type:none}',"",{version:3,sources:["webpack://./public/static/css/style.scss"],names:[],mappings:"AAAA,EACC,qBAAA,CAED,KACC,wEAAA,CACA,cAAA,CACA,iBAAA,CAGD,MACC,YAAA,CACA,kBAAA,CACA,0BAAA,CACA,kBAAA,CAGD,iBACC,YAAA,CACA,qBAAA,CACA,0BAAA,CACA,kBAAA,CAGD,gBACC,WAAA,CAGD,OACC,wEAAA,CACA,YAAA,CACG,UAAA,CACH,WAAA,CACA,eAAA,CACA,WAAA,CACA,gBAAA,CACA,cAAA,CAGD,GACI,oBAAA",sourcesContent:["* {\n\tbox-sizing: border-box;\n}\nbody {\n\tfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n\tfont-size: 1rem;\n\ttext-align: center;\n}\n\n.tabs {\n\tdisplay: flex;\n\tflex-direction: row; \n\tjustify-content: flex-start; \n\talign-items: center;\n}\n\n.teams-container {\n\tdisplay: flex; \n\tflex-direction: column;\n\tjustify-content: flex-start; \n\talign-items: center;\n}\n\n.logo-container {\n\twidth: 100px;\n}\n\nbutton {\n\tfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n\tdisplay: flex;\n    margin: 5px;\n\twidth: 120px;\n\tbackground: #fff;\n\tborder: none;\n\tpadding: 5px 10px;\n\tcursor: pointer;\t\n}\n\nul {\n    list-style-type: none;\n}\n\n"],sourceRoot:""}]);const i=s},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var u=0;u<e.length;u++){var p=[].concat(e[u]);r&&s[p[0]]||(void 0!==o&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=o),n&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=n):p[2]=n),a&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=a):p[4]="".concat(a)),t.push(p))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),s=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(s).concat([o]).join("\n")}return[t].join("\n")}},24:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>g});var r=n(379),a=n.n(r),o=n(795),s=n.n(o),i=n(569),c=n.n(i),u=n(565),p=n.n(u),l=n(216),d=n.n(l),f=n(589),h=n.n(f),m=n(433),v={};v.styleTagTransform=h(),v.setAttributes=p(),v.insert=c().bind(null,"head"),v.domAPI=s(),v.insertStyleElement=d(),a()(m.Z,v);const g=m.Z&&m.Z.locals?m.Z.locals:void 0},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},s=[],i=0;i<e.length;i++){var c=e[i],u=r.base?c[0]+r.base:c[0],p=o[u]||0,l="".concat(u," ").concat(p);o[u]=p+1;var d=n(l),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)t[d].references++,t[d].updater(f);else{var h=a(f,r);r.byIndex=i,t.splice(i,0,{identifier:l,updater:h,references:1})}s.push(l)}return s}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var s=0;s<o.length;s++){var i=n(o[s]);t[i].references--}for(var c=r(e,a),u=0;u<o.length;u++){var p=n(o[u]);0===t[p].references&&(t[p].updater(),t.splice(p,1))}o=c}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},281:(e,t,n)=>{const r=n(669);var a=1;function o(e){return e?e.split(" ").join("_"):e}e.exports={setApiKey(e){a=e},getTeamByName:async e=>(e=o(e),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchteams.php?t=${e}`)).data),getTeamByShortCode:async e=>(e=o(e),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchteams.php?sname=${e}`)).data),getAllPlayersByTeam:async e=>(e=o(e),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchplayers.php?t=${e}`)).data),async getPlayerByName(e,t){e=o(e),t=o(t);var n=[];return n.push(`p=${e}`),t&&n.push(`t=${t}`),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchplayers.php?${n.join("&")}`)).data},async getEventByName(e,t){e=o(e),t=o(t);var n=[];return n.push(`e=${e}`),t&&n.push(`s=${t}`),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchevents.php?${n.join("&")}`)).data},getSportsList:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/all_sports.php`)).data,getLeagueList:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/all_leagues.php`)).data,getCountryList:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/all_countries.php`)).data,async getLeagueListByCountry(e,t){e=o(e),t=o(t);var n=[];return n.push(`c=${e}`),t&&n.push(`s=${t}`),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/search_all_leagues.php?${n.join("&")}`)).data},getSeasonsInLeagueById:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/search_all_seasons.php?id=${e}`)).data,getTeamsByLeagueName:async e=>(e=o(e),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/search_all_teams.php?l=${e}`)).data),getTeamsByLeagueName:async e=>(e=o(e),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/search_all_teams.php?l=${e}`)).data),getTeamsByCountryAndSport:async(e,t)=>(t=o(t),e=o(e),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/search_all_teams.php?s=${e}&c=${t}`)).data),getPlayersByTeamId:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookup_all_players.php?id=${e}`)).data,getUsersLoved:async e=>(e=o(e),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchloves.php?u=${e}`)).data),getLeagueDetailsById:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupleague.php?id=${e}`)).data,getTeamDetailsById:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupteam.php?id=${e}`)).data,getPlayerDetailsById:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupplayer.php?id=${e}`)).data,getEventDetailsById:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupevent.php?id=${e}`)).data,getPlayerHonoursById:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookuphonors.php?id=${e}`)).data,getPlayerFormerTeamsById:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupformerteams.php?id=${e}`)).data,getPlayerContractsById:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupcontracts.php?id=${e}`)).data,getEventResultsById:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventresults.php?id=${e}`)).data,getTvEventById:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookuptv.php?id=${e}`)).data,getLookupTableByLeagueIdAndSeason:async(e,t)=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookuptable.php?l=${e}&s=${t}`)).data,getNext5EventsByTeamId:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsnext.php?id=${e}`)).data,getNext15EventsByLeagueId:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsnext.php?id=${e}`)).data,getPast5EventsByTeamId:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventslast.php?id=${e}`)).data,getPast15EventsByLeagueId:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventspastleague.php?id=${e}`)).data,getEventsInRound:async(e,t,n)=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsround.php?id=${e}&r=${t}&s=${n}`)).data,async getEventsOnDay(e,t,n){t=o(t),n=o(n);var s=[];return e&&s.push(`d=${e}`),n&&s.push(`l=${n}`),t&&s.push(`s=${t}`),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsday.php?${s.join("&")}`)).data},async getTvEventsOnDay(e,t,n){t=o(t),n=o(n);var s=[];return e&&s.push(`d=${e}`),n&&s.push(`a=${league}`),t&&s.push(`s=${t}`),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventstv.php?${s.join("&")}`)).data},getTvEventsByChannel:async e=>(e=o(e),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventstv.php?c=${e}`)).data),getEventsByLeagueIdAndSeason:async(e,t)=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsseason.php?id=${e}&s=${t}`)).data,getImage:async e=>(await r.get(`https://www.thesportsdb.com/images/media/league/fanart/${e}.jpg`)).data,getPreviewImage:async e=>(await r.get(`https://www.thesportsdb.com/images/media/league/fanart/${e}.jpg/preview`)).data,async getYoutubeEventHighligts(e,t,n){t=o(t),n=o(n);var s=[];return e&&s.push(`d=${e}`),t&&s.push(`l=${t}`),n&&s.push(`s=${n}`),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventshighlights.php?${s.join("&")}`)).data},getAllEventsByLeagueIdAndSeason:async(e,t)=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsseason.php?id=${e}&s=${t}`)).data,getSoccerLivescores:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/latestsoccer.php`)).data,getLivescoresBySport:async e=>(e=o(e),(await r.get(`https://www.thesportsdb.com/api/v2/json/${a}/livescore.php?s=${e}`)).data),getGolfLivescores:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/latestgolf.php`)).data,getBasketballLivescores:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/latestbasketball.php`)).data,getAmericanFootballLivescores:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/latestamericanfootball.php`)).data}},607:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function i(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,i)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,o,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(o){return function(i){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((a=(a=s.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){s.label=o[1];break}if(6===o[0]&&s.label<a[1]){s.label=a[1],a=o;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(o);break}a[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,i])}}};Object.defineProperty(t,"__esModule",{value:!0}),n(24);var o=n(694),s=function(e){return r(void 0,void 0,void 0,(function(){var t,n,r;return a(this,(function(a){switch(a.label){case 0:return document.getElementsByClassName("teams-container")[0]&&document.body.removeChild(document.getElementsByClassName("teams-container")[0]),t=e.target,[4,(0,o.getTeamsInLeague)(t.innerText)];case 1:return n=a.sent(),(r=document.createElement("div")).classList.add("teams-container"),n.forEach((function(e){var t=document.createElement("p");if(e.logo){var n=document.createElement("img");n.classList.add("logo-container"),n.src=e.logo,t.appendChild(n)}t.innerHTML+=e.name,r.appendChild(t)})),document.body.appendChild(r),console.log(n),[2]}}))}))};r(void 0,void 0,void 0,(function(){var e,t,n;return a(this,(function(r){switch(r.label){case 0:return[4,(0,o.getLeaguesNames)()];case 1:return e=r.sent(),t=document.createElement("div"),(n=document.createElement("ul")).classList.add("tabs"),e.forEach((function(t){var r=document.createElement("li"),a=document.createElement("button");a.tabIndex=e.indexOf(t),a.id=t,a.textContent=t,a.addEventListener("click",s),r.appendChild(a),n.appendChild(r)})),t.appendChild(n),document.body.appendChild(t),[2]}}))}))},694:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function i(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,i)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,o,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(o){return function(i){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((a=(a=s.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){s.label=o[1];break}if(6===o[0]&&s.label<a[1]){s.label=a[1],a=o;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(o);break}a[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,i])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.getTeamsInLeague=t.getLeaguesNames=void 0;var o=n(281);t.getLeaguesNames=function(){return r(void 0,void 0,void 0,(function(){var e;return a(this,(function(t){switch(t.label){case 0:return e=[],o.setApiKey(2),[4,o.getLeagueListByCountry("Brazil","Soccer")];case 1:return t.sent().countries.forEach((function(t){e.push(t.strLeague)})),[2,e]}}))}))},t.getTeamsInLeague=function(e){return r(void 0,void 0,void 0,(function(){var t;return a(this,(function(n){switch(n.label){case 0:return t=[],o.setApiKey(2),[4,o.getTeamsByLeagueName(e)];case 1:return n.sent().teams.forEach((function(e){var n={};n.name=e.strTeam,n.logo=e.strTeamLogo,t.push(n)})),[2,t]}}))}))}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nc=void 0,n(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LmpzIiwibWFwcGluZ3MiOiIyQkFBQUEsRUFBT0MsUUFBVSxFQUFqQixNLDJCQ0VBLElBQUlDLEVBQVEsRUFBUSxLQUNoQkMsRUFBUyxFQUFRLElBQ2pCQyxFQUFXLEVBQVEsS0FDbkJDLEVBQWdCLEVBQVEsSUFDeEJDLEVBQWUsRUFBUSxLQUN2QkMsRUFBa0IsRUFBUSxLQUMxQkMsRUFBYyxFQUFRLElBRTFCUixFQUFPQyxRQUFVLFNBQW9CUSxHQUNuQyxPQUFPLElBQUlDLFNBQVEsU0FBNEJDLEVBQVNDLEdBQ3RELElBQUlDLEVBQWNKLEVBQU9LLEtBQ3JCQyxFQUFpQk4sRUFBT08sUUFFeEJkLEVBQU1lLFdBQVdKLFdBQ1pFLEVBQWUsZ0JBR3hCLElBQUlHLEVBQVUsSUFBSUMsZUFHbEIsR0FBSVYsRUFBT1csS0FBTSxDQUNmLElBQUlDLEVBQVdaLEVBQU9XLEtBQUtDLFVBQVksR0FDbkNDLEVBQVdiLEVBQU9XLEtBQUtFLFVBQVksR0FDdkNQLEVBQWVRLGNBQWdCLFNBQVdDLEtBQUtILEVBQVcsSUFBTUMsR0FHbEUsSUFBSUcsRUFBV3BCLEVBQWNJLEVBQU9pQixRQUFTakIsRUFBT2tCLEtBNEVwRCxHQTNFQVQsRUFBUVUsS0FBS25CLEVBQU9vQixPQUFPQyxjQUFlMUIsRUFBU3FCLEVBQVVoQixFQUFPc0IsT0FBUXRCLEVBQU91QixtQkFBbUIsR0FHdEdkLEVBQVFlLFFBQVV4QixFQUFPd0IsUUFHekJmLEVBQVFnQixtQkFBcUIsV0FDM0IsR0FBS2hCLEdBQWtDLElBQXZCQSxFQUFRaUIsYUFRRCxJQUFuQmpCLEVBQVFrQixRQUFrQmxCLEVBQVFtQixhQUF3RCxJQUF6Q25CLEVBQVFtQixZQUFZQyxRQUFRLFVBQWpGLENBS0EsSUFBSUMsRUFBa0IsMEJBQTJCckIsRUFBVVosRUFBYVksRUFBUXNCLHlCQUEyQixLQUV2R0MsRUFBVyxDQUNiM0IsS0FGa0JMLEVBQU9pQyxjQUF3QyxTQUF4QmpDLEVBQU9pQyxhQUFpRHhCLEVBQVF1QixTQUEvQnZCLEVBQVF5QixhQUdsRlAsT0FBUWxCLEVBQVFrQixPQUNoQlEsV0FBWTFCLEVBQVEwQixXQUNwQjVCLFFBQVN1QixFQUNUOUIsT0FBUUEsRUFDUlMsUUFBU0EsR0FHWGYsRUFBT1EsRUFBU0MsRUFBUTZCLEdBR3hCdkIsRUFBVSxPQUlaQSxFQUFRMkIsUUFBVSxXQUNYM0IsSUFJTE4sRUFBT0osRUFBWSxrQkFBbUJDLEVBQVEsZUFBZ0JTLElBRzlEQSxFQUFVLE9BSVpBLEVBQVE0QixRQUFVLFdBR2hCbEMsRUFBT0osRUFBWSxnQkFBaUJDLEVBQVEsS0FBTVMsSUFHbERBLEVBQVUsTUFJWkEsRUFBUTZCLFVBQVksV0FDbEIsSUFBSUMsRUFBc0IsY0FBZ0J2QyxFQUFPd0IsUUFBVSxjQUN2RHhCLEVBQU91QyxzQkFDVEEsRUFBc0J2QyxFQUFPdUMscUJBRS9CcEMsRUFBT0osRUFBWXdDLEVBQXFCdkMsRUFBUSxlQUM5Q1MsSUFHRkEsRUFBVSxNQU1SaEIsRUFBTStDLHVCQUF3QixDQUNoQyxJQUFJQyxFQUFVLEVBQVEsS0FHbEJDLEdBQWExQyxFQUFPMkMsaUJBQW1CN0MsRUFBZ0JrQixLQUFjaEIsRUFBTzRDLGVBQzlFSCxFQUFRSSxLQUFLN0MsRUFBTzRDLHFCQUNwQkUsRUFFRUosSUFDRnBDLEVBQWVOLEVBQU8rQyxnQkFBa0JMLEdBdUI1QyxHQWxCSSxxQkFBc0JqQyxHQUN4QmhCLEVBQU11RCxRQUFRMUMsR0FBZ0IsU0FBMEIyQyxFQUFLQyxRQUNoQyxJQUFoQjlDLEdBQXFELGlCQUF0QjhDLEVBQUlDLHFCQUVyQzdDLEVBQWU0QyxHQUd0QnpDLEVBQVEyQyxpQkFBaUJGLEVBQUtELE1BTS9CeEQsRUFBTTRELFlBQVlyRCxFQUFPMkMsbUJBQzVCbEMsRUFBUWtDLGtCQUFvQjNDLEVBQU8yQyxpQkFJakMzQyxFQUFPaUMsYUFDVCxJQUNFeEIsRUFBUXdCLGFBQWVqQyxFQUFPaUMsYUFDOUIsTUFBT3FCLEdBR1AsR0FBNEIsU0FBeEJ0RCxFQUFPaUMsYUFDVCxNQUFNcUIsRUFNNkIsbUJBQTlCdEQsRUFBT3VELG9CQUNoQjlDLEVBQVErQyxpQkFBaUIsV0FBWXhELEVBQU91RCxvQkFJUCxtQkFBNUJ2RCxFQUFPeUQsa0JBQW1DaEQsRUFBUWlELFFBQzNEakQsRUFBUWlELE9BQU9GLGlCQUFpQixXQUFZeEQsRUFBT3lELGtCQUdqRHpELEVBQU8yRCxhQUVUM0QsRUFBTzJELFlBQVlDLFFBQVFDLE1BQUssU0FBb0JDLEdBQzdDckQsSUFJTEEsRUFBUXNELFFBQ1I1RCxFQUFPMkQsR0FFUHJELEVBQVUsY0FJTXFDLElBQWhCMUMsSUFDRkEsRUFBYyxNQUloQkssRUFBUXVELEtBQUs1RCxRLDJCQy9LakIsSUFBSVgsRUFBUSxFQUFRLEtBQ2hCd0UsRUFBTyxFQUFRLEtBQ2ZDLEVBQVEsRUFBUSxLQUNoQkMsRUFBYyxFQUFRLEtBUzFCLFNBQVNDLEVBQWVDLEdBQ3RCLElBQUlDLEVBQVUsSUFBSUosRUFBTUcsR0FDcEJFLEVBQVdOLEVBQUtDLEVBQU1NLFVBQVUvRCxRQUFTNkQsR0FRN0MsT0FMQTdFLEVBQU1nRixPQUFPRixFQUFVTCxFQUFNTSxVQUFXRixHQUd4QzdFLEVBQU1nRixPQUFPRixFQUFVRCxHQUVoQkMsRUFJVCxJQUFJRyxFQUFRTixFQXRCRyxFQUFRLE1BeUJ2Qk0sRUFBTVIsTUFBUUEsRUFHZFEsRUFBTUMsT0FBUyxTQUFnQkMsR0FDN0IsT0FBT1IsRUFBZUQsRUFBWU8sRUFBTUcsU0FBVUQsS0FJcERGLEVBQU1JLE9BQVMsRUFBUSxLQUN2QkosRUFBTUssWUFBYyxFQUFRLEtBQzVCTCxFQUFNTSxTQUFXLEVBQVEsS0FHekJOLEVBQU1PLElBQU0sU0FBYUMsR0FDdkIsT0FBT2pGLFFBQVFnRixJQUFJQyxJQUVyQlIsRUFBTVMsT0FBUyxFQUFRLEtBRXZCNUYsRUFBT0MsUUFBVWtGLEVBR2pCbkYsRUFBT0MsUUFBUCxRQUF5QmtGLEcscUJDNUN6QixTQUFTSSxFQUFPTSxHQUNkQyxLQUFLRCxRQUFVQSxFQUdqQk4sRUFBT04sVUFBVWMsU0FBVyxXQUMxQixNQUFPLFVBQVlELEtBQUtELFFBQVUsS0FBT0MsS0FBS0QsUUFBVSxLQUcxRE4sRUFBT04sVUFBVWUsWUFBYSxFQUU5QmhHLEVBQU9DLFFBQVVzRixHLDJCQ2hCakIsSUFBSUEsRUFBUyxFQUFRLEtBUXJCLFNBQVNDLEVBQVlTLEdBQ25CLEdBQXdCLG1CQUFiQSxFQUNULE1BQU0sSUFBSUMsVUFBVSxnQ0FHdEIsSUFBSUMsRUFDSkwsS0FBS3pCLFFBQVUsSUFBSTNELFNBQVEsU0FBeUJDLEdBQ2xEd0YsRUFBaUJ4RixLQUduQixJQUFJeUYsRUFBUU4sS0FDWkcsR0FBUyxTQUFnQkosR0FDbkJPLEVBQU1DLFNBS1ZELEVBQU1DLE9BQVMsSUFBSWQsRUFBT00sR0FDMUJNLEVBQWVDLEVBQU1DLFlBT3pCYixFQUFZUCxVQUFVcUIsaUJBQW1CLFdBQ3ZDLEdBQUlSLEtBQUtPLE9BQ1AsTUFBTVAsS0FBS08sUUFRZmIsRUFBWWUsT0FBUyxXQUNuQixJQUFJaEMsRUFJSixNQUFPLENBQ0w2QixNQUpVLElBQUlaLEdBQVksU0FBa0JnQixHQUM1Q2pDLEVBQVNpQyxLQUlUakMsT0FBUUEsSUFJWnZFLEVBQU9DLFFBQVV1RixHLHFCQ3REakJ4RixFQUFPQyxRQUFVLFNBQWtCd0csR0FDakMsU0FBVUEsSUFBU0EsRUFBTVQsYywyQkNEM0IsSUFBSTlGLEVBQVEsRUFBUSxLQUNoQkUsRUFBVyxFQUFRLEtBQ25Cc0csRUFBcUIsRUFBUSxLQUM3QkMsRUFBa0IsRUFBUSxLQUMxQi9CLEVBQWMsRUFBUSxLQU8xQixTQUFTRCxFQUFNVSxHQUNiUyxLQUFLUixTQUFXRCxFQUNoQlMsS0FBS2MsYUFBZSxDQUNsQjFGLFFBQVMsSUFBSXdGLEVBQ2JqRSxTQUFVLElBQUlpRSxHQVNsQi9CLEVBQU1NLFVBQVUvRCxRQUFVLFNBQWlCVCxHQUduQixpQkFBWEEsR0FDVEEsRUFBU29HLFVBQVUsSUFBTSxJQUNsQmxGLElBQU1rRixVQUFVLEdBRXZCcEcsRUFBU0EsR0FBVSxJQUdyQkEsRUFBU21FLEVBQVlrQixLQUFLUixTQUFVN0UsSUFHekJvQixPQUNUcEIsRUFBT29CLE9BQVNwQixFQUFPb0IsT0FBTytCLGNBQ3JCa0MsS0FBS1IsU0FBU3pELE9BQ3ZCcEIsRUFBT29CLE9BQVNpRSxLQUFLUixTQUFTekQsT0FBTytCLGNBRXJDbkQsRUFBT29CLE9BQVMsTUFJbEIsSUFBSWlGLEVBQVEsQ0FBQ0gsT0FBaUJwRCxHQUMxQmMsRUFBVTNELFFBQVFDLFFBQVFGLEdBVTlCLElBUkFxRixLQUFLYyxhQUFhMUYsUUFBUXVDLFNBQVEsU0FBb0NzRCxHQUNwRUQsRUFBTUUsUUFBUUQsRUFBWUUsVUFBV0YsRUFBWUcsYUFHbkRwQixLQUFLYyxhQUFhbkUsU0FBU2dCLFNBQVEsU0FBa0NzRCxHQUNuRUQsRUFBTUssS0FBS0osRUFBWUUsVUFBV0YsRUFBWUcsYUFHekNKLEVBQU1NLFFBQ1gvQyxFQUFVQSxFQUFRQyxLQUFLd0MsRUFBTU8sUUFBU1AsRUFBTU8sU0FHOUMsT0FBT2hELEdBR1RNLEVBQU1NLFVBQVVxQyxPQUFTLFNBQWdCN0csR0FFdkMsT0FEQUEsRUFBU21FLEVBQVlrQixLQUFLUixTQUFVN0UsR0FDN0JMLEVBQVNLLEVBQU9rQixJQUFLbEIsRUFBT3NCLE9BQVF0QixFQUFPdUIsa0JBQWtCdUYsUUFBUSxNQUFPLEtBSXJGckgsRUFBTXVELFFBQVEsQ0FBQyxTQUFVLE1BQU8sT0FBUSxZQUFZLFNBQTZCNUIsR0FFL0U4QyxFQUFNTSxVQUFVcEQsR0FBVSxTQUFTRixFQUFLbEIsR0FDdEMsT0FBT3FGLEtBQUs1RSxRQUFRaEIsRUFBTXNILE1BQU0vRyxHQUFVLEdBQUksQ0FDNUNvQixPQUFRQSxFQUNSRixJQUFLQSxTQUtYekIsRUFBTXVELFFBQVEsQ0FBQyxPQUFRLE1BQU8sVUFBVSxTQUErQjVCLEdBRXJFOEMsRUFBTU0sVUFBVXBELEdBQVUsU0FBU0YsRUFBS2IsRUFBTUwsR0FDNUMsT0FBT3FGLEtBQUs1RSxRQUFRaEIsRUFBTXNILE1BQU0vRyxHQUFVLEdBQUksQ0FDNUNvQixPQUFRQSxFQUNSRixJQUFLQSxFQUNMYixLQUFNQSxTQUtaZCxFQUFPQyxRQUFVMEUsRywyQkMzRmpCLElBQUl6RSxFQUFRLEVBQVEsS0FFcEIsU0FBU3dHLElBQ1BaLEtBQUsyQixTQUFXLEdBV2xCZixFQUFtQnpCLFVBQVV5QyxJQUFNLFNBQWFULEVBQVdDLEdBS3pELE9BSkFwQixLQUFLMkIsU0FBU04sS0FBSyxDQUNqQkYsVUFBV0EsRUFDWEMsU0FBVUEsSUFFTHBCLEtBQUsyQixTQUFTTCxPQUFTLEdBUWhDVixFQUFtQnpCLFVBQVUwQyxNQUFRLFNBQWVDLEdBQzlDOUIsS0FBSzJCLFNBQVNHLEtBQ2hCOUIsS0FBSzJCLFNBQVNHLEdBQU0sT0FZeEJsQixFQUFtQnpCLFVBQVV4QixRQUFVLFNBQWlCb0UsR0FDdEQzSCxFQUFNdUQsUUFBUXFDLEtBQUsyQixVQUFVLFNBQXdCSyxHQUN6QyxPQUFOQSxHQUNGRCxFQUFHQyxPQUtUOUgsRUFBT0MsUUFBVXlHLEcsMEJDakRqQixJQUFJcUIsRUFBZ0IsRUFBUSxLQUN4QkMsRUFBYyxFQUFRLEtBVzFCaEksRUFBT0MsUUFBVSxTQUF1QnlCLEVBQVN1RyxHQUMvQyxPQUFJdkcsSUFBWXFHLEVBQWNFLEdBQ3JCRCxFQUFZdEcsRUFBU3VHLEdBRXZCQSxJLDBCQ2hCVCxJQUFJQyxFQUFlLEVBQVEsS0FZM0JsSSxFQUFPQyxRQUFVLFNBQXFCNEYsRUFBU3BGLEVBQVEwSCxFQUFNakgsRUFBU3VCLEdBQ3BFLElBQUkyRixFQUFRLElBQUlDLE1BQU14QyxHQUN0QixPQUFPcUMsRUFBYUUsRUFBTzNILEVBQVEwSCxFQUFNakgsRUFBU3VCLEssMkJDZHBELElBQUl2QyxFQUFRLEVBQVEsS0FDaEJvSSxFQUFnQixFQUFRLEtBQ3hCN0MsRUFBVyxFQUFRLEtBQ25CSCxFQUFXLEVBQVEsS0FLdkIsU0FBU2lELEVBQTZCOUgsR0FDaENBLEVBQU8yRCxhQUNUM0QsRUFBTzJELFlBQVlrQyxtQkFVdkJ0RyxFQUFPQyxRQUFVLFNBQXlCUSxHQTZCeEMsT0E1QkE4SCxFQUE2QjlILEdBRzdCQSxFQUFPTyxRQUFVUCxFQUFPTyxTQUFXLEdBR25DUCxFQUFPSyxLQUFPd0gsRUFDWjdILEVBQU9LLEtBQ1BMLEVBQU9PLFFBQ1BQLEVBQU8rSCxrQkFJVC9ILEVBQU9PLFFBQVVkLEVBQU1zSCxNQUNyQi9HLEVBQU9PLFFBQVF5SCxRQUFVLEdBQ3pCaEksRUFBT08sUUFBUVAsRUFBT29CLFNBQVcsR0FDakNwQixFQUFPTyxTQUdUZCxFQUFNdUQsUUFDSixDQUFDLFNBQVUsTUFBTyxPQUFRLE9BQVEsTUFBTyxRQUFTLFdBQ2xELFNBQTJCNUIsVUFDbEJwQixFQUFPTyxRQUFRYSxPQUlacEIsRUFBT2lJLFNBQVdwRCxFQUFTb0QsU0FFMUJqSSxHQUFRNkQsTUFBSyxTQUE2QjdCLEdBVXZELE9BVEE4RixFQUE2QjlILEdBRzdCZ0MsRUFBUzNCLEtBQU93SCxFQUNkN0YsRUFBUzNCLEtBQ1QyQixFQUFTekIsUUFDVFAsRUFBT2tJLG1CQUdGbEcsS0FDTixTQUE0QjRELEdBYzdCLE9BYktaLEVBQVNZLEtBQ1prQyxFQUE2QjlILEdBR3pCNEYsR0FBVUEsRUFBTzVELFdBQ25CNEQsRUFBTzVELFNBQVMzQixLQUFPd0gsRUFDckJqQyxFQUFPNUQsU0FBUzNCLEtBQ2hCdUYsRUFBTzVELFNBQVN6QixRQUNoQlAsRUFBT2tJLHFCQUtOakksUUFBUUUsT0FBT3lGLFEscUJDaEUxQnJHLEVBQU9DLFFBQVUsU0FBc0JtSSxFQUFPM0gsRUFBUTBILEVBQU1qSCxFQUFTdUIsR0E0Qm5FLE9BM0JBMkYsRUFBTTNILE9BQVNBLEVBQ1gwSCxJQUNGQyxFQUFNRCxLQUFPQSxHQUdmQyxFQUFNbEgsUUFBVUEsRUFDaEJrSCxFQUFNM0YsU0FBV0EsRUFDakIyRixFQUFNUSxjQUFlLEVBRXJCUixFQUFNUyxPQUFTLFdBQ2IsTUFBTyxDQUVMaEQsUUFBU0MsS0FBS0QsUUFDZGlELEtBQU1oRCxLQUFLZ0QsS0FFWEMsWUFBYWpELEtBQUtpRCxZQUNsQkMsT0FBUWxELEtBQUtrRCxPQUViQyxTQUFVbkQsS0FBS21ELFNBQ2ZDLFdBQVlwRCxLQUFLb0QsV0FDakJDLGFBQWNyRCxLQUFLcUQsYUFDbkJDLE1BQU90RCxLQUFLc0QsTUFFWjNJLE9BQVFxRixLQUFLckYsT0FDYjBILEtBQU1yQyxLQUFLcUMsT0FHUkMsSSwyQkN0Q1QsSUFBSWxJLEVBQVEsRUFBUSxLQVVwQkYsRUFBT0MsUUFBVSxTQUFxQm9KLEVBQVNDLEdBRTdDQSxFQUFVQSxHQUFXLEdBQ3JCLElBQUk3SSxFQUFTLEdBRVQ4SSxFQUF1QixDQUFDLE1BQU8sU0FBVSxTQUFVLFFBQ25EQyxFQUEwQixDQUFDLFVBQVcsT0FBUSxTQUM5Q0MsRUFBdUIsQ0FDekIsVUFBVyxNQUFPLG1CQUFvQixvQkFBcUIsbUJBQzNELFVBQVcsa0JBQW1CLFVBQVcsZUFBZ0IsaUJBQ3pELGlCQUFrQixtQkFBb0IscUJBQ3RDLG1CQUFvQixpQkFBa0IsZUFBZ0IsWUFDdEQsYUFBYyxjQUFlLGNBRy9CdkosRUFBTXVELFFBQVE4RixHQUFzQixTQUEwQkcsUUFDL0IsSUFBbEJKLEVBQVFJLEtBQ2pCakosRUFBT2lKLEdBQVFKLEVBQVFJLE9BSTNCeEosRUFBTXVELFFBQVErRixHQUF5QixTQUE2QkUsR0FDOUR4SixFQUFNeUosU0FBU0wsRUFBUUksSUFDekJqSixFQUFPaUosR0FBUXhKLEVBQU0wSixVQUFVUCxFQUFRSyxHQUFPSixFQUFRSSxTQUNwQixJQUFsQkosRUFBUUksR0FDeEJqSixFQUFPaUosR0FBUUosRUFBUUksR0FDZHhKLEVBQU15SixTQUFTTixFQUFRSyxJQUNoQ2pKLEVBQU9pSixHQUFReEosRUFBTTBKLFVBQVVQLEVBQVFLLFNBQ0wsSUFBbEJMLEVBQVFLLEtBQ3hCakosRUFBT2lKLEdBQVFMLEVBQVFLLE9BSTNCeEosRUFBTXVELFFBQVFnRyxHQUFzQixTQUEwQkMsUUFDL0IsSUFBbEJKLEVBQVFJLEdBQ2pCakosRUFBT2lKLEdBQVFKLEVBQVFJLFFBQ1csSUFBbEJMLEVBQVFLLEtBQ3hCakosRUFBT2lKLEdBQVFMLEVBQVFLLE9BSTNCLElBQUlHLEVBQVlOLEVBQ2JPLE9BQU9OLEdBQ1BNLE9BQU9MLEdBRU5NLEVBQVlDLE9BQ2JDLEtBQUtYLEdBQ0xZLFFBQU8sU0FBeUJ2RyxHQUMvQixPQUFtQyxJQUE1QmtHLEVBQVV2SCxRQUFRcUIsTUFXN0IsT0FSQXpELEVBQU11RCxRQUFRc0csR0FBVyxTQUFtQ0wsUUFDN0IsSUFBbEJKLEVBQVFJLEdBQ2pCakosRUFBT2lKLEdBQVFKLEVBQVFJLFFBQ1csSUFBbEJMLEVBQVFLLEtBQ3hCakosRUFBT2lKLEdBQVFMLEVBQVFLLE9BSXBCakosSSwwQkNyRVQsSUFBSUQsRUFBYyxFQUFRLElBUzFCUixFQUFPQyxRQUFVLFNBQWdCVSxFQUFTQyxFQUFRNkIsR0FDaEQsSUFBSTBILEVBQWlCMUgsRUFBU2hDLE9BQU8wSixnQkFDaENBLEdBQWtCQSxFQUFlMUgsRUFBU0wsUUFDN0N6QixFQUFROEIsR0FFUjdCLEVBQU9KLEVBQ0wsbUNBQXFDaUMsRUFBU0wsT0FDOUNLLEVBQVNoQyxPQUNULEtBQ0FnQyxFQUFTdkIsUUFDVHVCLE0sMkJDbkJOLElBQUl2QyxFQUFRLEVBQVEsS0FVcEJGLEVBQU9DLFFBQVUsU0FBdUJhLEVBQU1FLEVBQVNvSixHQU1yRCxPQUpBbEssRUFBTXVELFFBQVEyRyxHQUFLLFNBQW1CdkMsR0FDcEMvRyxFQUFPK0csRUFBRy9HLEVBQU1FLE1BR1hGLEksMkJDaEJULElBQUlaLEVBQVEsRUFBUSxLQUNoQm1LLEVBQXNCLEVBQVEsSUFFOUJDLEVBQXVCLENBQ3pCLGVBQWdCLHFDQUdsQixTQUFTQyxFQUFzQnZKLEVBQVN5RixJQUNqQ3ZHLEVBQU00RCxZQUFZOUMsSUFBWWQsRUFBTTRELFlBQVk5QyxFQUFRLG1CQUMzREEsRUFBUSxnQkFBa0J5RixHQWdCOUIsSUFYTWlDLEVBV0ZwRCxFQUFXLENBQ2JvRCxVQVg4QixvQkFBbkJ2SCxnQkFHbUIsb0JBQVpxSixTQUF1RSxxQkFBNUNSLE9BQU8vRSxVQUFVYyxTQUFTMEUsS0FBS0QsWUFEMUU5QixFQUFVLEVBQVEsTUFLYkEsR0FNUEYsaUJBQWtCLENBQUMsU0FBMEIxSCxFQUFNRSxHQUdqRCxPQUZBcUosRUFBb0JySixFQUFTLFVBQzdCcUosRUFBb0JySixFQUFTLGdCQUN6QmQsRUFBTWUsV0FBV0gsSUFDbkJaLEVBQU13SyxjQUFjNUosSUFDcEJaLEVBQU15SyxTQUFTN0osSUFDZlosRUFBTTBLLFNBQVM5SixJQUNmWixFQUFNMkssT0FBTy9KLElBQ2JaLEVBQU00SyxPQUFPaEssR0FFTkEsRUFFTFosRUFBTTZLLGtCQUFrQmpLLEdBQ25CQSxFQUFLa0ssT0FFVjlLLEVBQU0rSyxrQkFBa0JuSyxJQUMxQnlKLEVBQXNCdkosRUFBUyxtREFDeEJGLEVBQUtpRixZQUVWN0YsRUFBTXlKLFNBQVM3SSxJQUNqQnlKLEVBQXNCdkosRUFBUyxrQ0FDeEJrSyxLQUFLQyxVQUFVckssSUFFakJBLElBR1Q2SCxrQkFBbUIsQ0FBQyxTQUEyQjdILEdBRTdDLEdBQW9CLGlCQUFUQSxFQUNULElBQ0VBLEVBQU9vSyxLQUFLRSxNQUFNdEssR0FDbEIsTUFBT2lELElBRVgsT0FBT2pELElBT1RtQixRQUFTLEVBRVRvQixlQUFnQixhQUNoQkcsZUFBZ0IsZUFFaEI2SCxrQkFBbUIsRUFFbkJsQixlQUFnQixTQUF3Qi9ILEdBQ3RDLE9BQU9BLEdBQVUsS0FBT0EsRUFBUyxLQUlyQ2tELFFBQW1CLENBQ2pCbUQsT0FBUSxDQUNOLE9BQVUsdUNBSWR2SSxFQUFNdUQsUUFBUSxDQUFDLFNBQVUsTUFBTyxTQUFTLFNBQTZCNUIsR0FDcEV5RCxFQUFTdEUsUUFBUWEsR0FBVSxNQUc3QjNCLEVBQU11RCxRQUFRLENBQUMsT0FBUSxNQUFPLFVBQVUsU0FBK0I1QixHQUNyRXlELEVBQVN0RSxRQUFRYSxHQUFVM0IsRUFBTXNILE1BQU04QyxNQUd6Q3RLLEVBQU9DLFFBQVVxRixHLHFCQzlGakJ0RixFQUFPQyxRQUFVLFNBQWM0SCxFQUFJeUQsR0FDakMsT0FBTyxXQUVMLElBREEsSUFBSUMsRUFBTyxJQUFJQyxNQUFNM0UsVUFBVU8sUUFDdEJxRSxFQUFJLEVBQUdBLEVBQUlGLEVBQUtuRSxPQUFRcUUsSUFDL0JGLEVBQUtFLEdBQUs1RSxVQUFVNEUsR0FFdEIsT0FBTzVELEVBQUc2RCxNQUFNSixFQUFTQyxNLDJCQ043QixJQUFJckwsRUFBUSxFQUFRLEtBRXBCLFNBQVN5TCxFQUFPakksR0FDZCxPQUFPa0ksbUJBQW1CbEksR0FDeEI2RCxRQUFRLFFBQVMsS0FDakJBLFFBQVEsUUFBUyxLQUNqQkEsUUFBUSxPQUFRLEtBQ2hCQSxRQUFRLFFBQVMsS0FDakJBLFFBQVEsT0FBUSxLQUNoQkEsUUFBUSxRQUFTLEtBQ2pCQSxRQUFRLFFBQVMsS0FVckJ2SCxFQUFPQyxRQUFVLFNBQWtCMEIsRUFBS0ksRUFBUUMsR0FFOUMsSUFBS0QsRUFDSCxPQUFPSixFQUdULElBQUlrSyxFQUNKLEdBQUk3SixFQUNGNkosRUFBbUI3SixFQUFpQkQsUUFDL0IsR0FBSTdCLEVBQU0rSyxrQkFBa0JsSixHQUNqQzhKLEVBQW1COUosRUFBT2dFLGVBQ3JCLENBQ0wsSUFBSStGLEVBQVEsR0FFWjVMLEVBQU11RCxRQUFRMUIsR0FBUSxTQUFtQjJCLEVBQUtDLEdBQ3hDRCxVQUlBeEQsRUFBTTZMLFFBQVFySSxHQUNoQkMsR0FBWSxLQUVaRCxFQUFNLENBQUNBLEdBR1R4RCxFQUFNdUQsUUFBUUMsR0FBSyxTQUFvQnNJLEdBQ2pDOUwsRUFBTStMLE9BQU9ELEdBQ2ZBLEVBQUlBLEVBQUVFLGNBQ0doTSxFQUFNeUosU0FBU3FDLEtBQ3hCQSxFQUFJZCxLQUFLQyxVQUFVYSxJQUVyQkYsRUFBTTNFLEtBQUt3RSxFQUFPaEksR0FBTyxJQUFNZ0ksRUFBT0ssV0FJMUNILEVBQW1CQyxFQUFNSyxLQUFLLEtBR2hDLEdBQUlOLEVBQWtCLENBQ3BCLElBQUlPLEVBQWdCekssRUFBSVcsUUFBUSxNQUNULElBQW5COEosSUFDRnpLLEVBQU1BLEVBQUkwSyxNQUFNLEVBQUdELElBR3JCekssS0FBOEIsSUFBdEJBLEVBQUlXLFFBQVEsS0FBYyxJQUFNLEtBQU91SixFQUdqRCxPQUFPbEssSSxxQkM1RFQzQixFQUFPQyxRQUFVLFNBQXFCeUIsRUFBUzRLLEdBQzdDLE9BQU9BLEVBQ0g1SyxFQUFRNkYsUUFBUSxPQUFRLElBQU0sSUFBTStFLEVBQVkvRSxRQUFRLE9BQVEsSUFDaEU3RixJLDJCQ1ZOLElBQUl4QixFQUFRLEVBQVEsS0FFcEJGLEVBQU9DLFFBQ0xDLEVBQU0rQyx1QkFJSyxDQUNMc0osTUFBTyxTQUFlekQsRUFBTXJDLEVBQU8rRixFQUFTQyxFQUFNQyxFQUFRQyxHQUN4RCxJQUFJQyxFQUFTLEdBQ2JBLEVBQU96RixLQUFLMkIsRUFBTyxJQUFNOEMsbUJBQW1CbkYsSUFFeEN2RyxFQUFNMk0sU0FBU0wsSUFDakJJLEVBQU96RixLQUFLLFdBQWEsSUFBSTJGLEtBQUtOLEdBQVNPLGVBR3pDN00sRUFBTThNLFNBQVNQLElBQ2pCRyxFQUFPekYsS0FBSyxRQUFVc0YsR0FHcEJ2TSxFQUFNOE0sU0FBU04sSUFDakJFLEVBQU96RixLQUFLLFVBQVl1RixJQUdYLElBQVhDLEdBQ0ZDLEVBQU96RixLQUFLLFVBR2Q4RixTQUFTTCxPQUFTQSxFQUFPVCxLQUFLLE9BR2hDN0ksS0FBTSxTQUFjd0YsR0FDbEIsSUFBSW9FLEVBQVFELFNBQVNMLE9BQU9NLE1BQU0sSUFBSUMsT0FBTyxhQUFlckUsRUFBTyxjQUNuRSxPQUFRb0UsRUFBUUUsbUJBQW1CRixFQUFNLElBQU0sTUFHakRHLE9BQVEsU0FBZ0J2RSxHQUN0QmhELEtBQUt5RyxNQUFNekQsRUFBTSxHQUFJZ0UsS0FBS1EsTUFBUSxTQU8vQixDQUNMZixNQUFPLGFBQ1BqSixLQUFNLFdBQWtCLE9BQU8sTUFDL0IrSixPQUFRLGUscUJDekNoQnJOLEVBQU9DLFFBQVUsU0FBdUIwQixHQUl0QyxNQUFPLGdDQUFnQzRMLEtBQUs1TCxLLDJCQ1Y5QyxJQUFJekIsRUFBUSxFQUFRLEtBRXBCRixFQUFPQyxRQUNMQyxFQUFNK0MsdUJBSUosV0FDRSxJQUVJdUssRUFGQUMsRUFBTyxrQkFBa0JGLEtBQUtHLFVBQVVDLFdBQ3hDQyxFQUFpQlgsU0FBU1ksY0FBYyxLQVM1QyxTQUFTQyxFQUFXbk0sR0FDbEIsSUFBSW9NLEVBQU9wTSxFQVdYLE9BVEk4TCxJQUVGRyxFQUFlSSxhQUFhLE9BQVFELEdBQ3BDQSxFQUFPSCxFQUFlRyxNQUd4QkgsRUFBZUksYUFBYSxPQUFRRCxHQUc3QixDQUNMQSxLQUFNSCxFQUFlRyxLQUNyQkUsU0FBVUwsRUFBZUssU0FBV0wsRUFBZUssU0FBUzFHLFFBQVEsS0FBTSxJQUFNLEdBQ2hGMkcsS0FBTU4sRUFBZU0sS0FDckJDLE9BQVFQLEVBQWVPLE9BQVNQLEVBQWVPLE9BQU81RyxRQUFRLE1BQU8sSUFBTSxHQUMzRTZHLEtBQU1SLEVBQWVRLEtBQU9SLEVBQWVRLEtBQUs3RyxRQUFRLEtBQU0sSUFBTSxHQUNwRThHLFNBQVVULEVBQWVTLFNBQ3pCQyxLQUFNVixFQUFlVSxLQUNyQkMsU0FBaUQsTUFBdENYLEVBQWVXLFNBQVNDLE9BQU8sR0FDeENaLEVBQWVXLFNBQ2YsSUFBTVgsRUFBZVcsVUFZM0IsT0FSQWYsRUFBWU0sRUFBV1csT0FBT0MsU0FBU1gsTUFRaEMsU0FBeUJZLEdBQzlCLElBQUlDLEVBQVUxTyxFQUFNOE0sU0FBUzJCLEdBQWViLEVBQVdhLEdBQWNBLEVBQ3JFLE9BQVFDLEVBQU9YLFdBQWFULEVBQVVTLFVBQ2xDVyxFQUFPVixPQUFTVixFQUFVVSxNQWhEbEMsR0FzRFMsV0FDTCxPQUFPLEksMEJDOURmLElBQUloTyxFQUFRLEVBQVEsS0FFcEJGLEVBQU9DLFFBQVUsU0FBNkJlLEVBQVM2TixHQUNyRDNPLEVBQU11RCxRQUFRekMsR0FBUyxTQUF1QnlGLEVBQU9xQyxHQUMvQ0EsSUFBUytGLEdBQWtCL0YsRUFBS2hILGdCQUFrQitNLEVBQWUvTSxnQkFDbkVkLEVBQVE2TixHQUFrQnBJLFNBQ25CekYsRUFBUThILFMsMkJDTnJCLElBQUk1SSxFQUFRLEVBQVEsS0FJaEI0TyxFQUFvQixDQUN0QixNQUFPLGdCQUFpQixpQkFBa0IsZUFBZ0IsT0FDMUQsVUFBVyxPQUFRLE9BQVEsb0JBQXFCLHNCQUNoRCxnQkFBaUIsV0FBWSxlQUFnQixzQkFDN0MsVUFBVyxjQUFlLGNBZ0I1QjlPLEVBQU9DLFFBQVUsU0FBc0JlLEdBQ3JDLElBQ0kyQyxFQUNBRCxFQUNBK0gsRUFIQW1ELEVBQVMsR0FLYixPQUFLNU4sR0FFTGQsRUFBTXVELFFBQVF6QyxFQUFRK04sTUFBTSxPQUFPLFNBQWdCQyxHQUtqRCxHQUpBdkQsRUFBSXVELEVBQUsxTSxRQUFRLEtBQ2pCcUIsRUFBTXpELEVBQU0rTyxLQUFLRCxFQUFLRSxPQUFPLEVBQUd6RCxJQUFJN0gsY0FDcENGLEVBQU14RCxFQUFNK08sS0FBS0QsRUFBS0UsT0FBT3pELEVBQUksSUFFN0I5SCxFQUFLLENBQ1AsR0FBSWlMLEVBQU9qTCxJQUFRbUwsRUFBa0J4TSxRQUFRcUIsSUFBUSxFQUNuRCxPQUdBaUwsRUFBT2pMLEdBREcsZUFBUkEsR0FDYWlMLEVBQU9qTCxHQUFPaUwsRUFBT2pMLEdBQU8sSUFBSW1HLE9BQU8sQ0FBQ3BHLElBRXpDa0wsRUFBT2pMLEdBQU9pTCxFQUFPakwsR0FBTyxLQUFPRCxFQUFNQSxNQUt0RGtMLEdBbkJnQkEsSSxxQkNWekI1TyxFQUFPQyxRQUFVLFNBQWdCa1AsR0FDL0IsT0FBTyxTQUFjQyxHQUNuQixPQUFPRCxFQUFTekQsTUFBTSxLQUFNMEQsTSwyQkN0QmhDLElBQUkxSyxFQUFPLEVBQVEsS0FNZnFCLEVBQVdpRSxPQUFPL0UsVUFBVWMsU0FRaEMsU0FBU2dHLEVBQVFySSxHQUNmLE1BQThCLG1CQUF2QnFDLEVBQVMwRSxLQUFLL0csR0FTdkIsU0FBU0ksRUFBWUosR0FDbkIsWUFBc0IsSUFBUkEsRUE0RWhCLFNBQVNpRyxFQUFTakcsR0FDaEIsT0FBZSxPQUFSQSxHQUErQixpQkFBUkEsRUF1Q2hDLFNBQVMyTCxFQUFXM0wsR0FDbEIsTUFBOEIsc0JBQXZCcUMsRUFBUzBFLEtBQUsvRyxHQXdFdkIsU0FBU0QsRUFBUTZMLEVBQUt6SCxHQUVwQixHQUFJeUgsUUFVSixHQUxtQixpQkFBUkEsSUFFVEEsRUFBTSxDQUFDQSxJQUdMdkQsRUFBUXVELEdBRVYsSUFBSyxJQUFJN0QsRUFBSSxFQUFHOEQsRUFBSUQsRUFBSWxJLE9BQVFxRSxFQUFJOEQsRUFBRzlELElBQ3JDNUQsRUFBRzRDLEtBQUssS0FBTTZFLEVBQUk3RCxHQUFJQSxFQUFHNkQsUUFJM0IsSUFBSyxJQUFJM0wsS0FBTzJMLEVBQ1Z0RixPQUFPL0UsVUFBVXVLLGVBQWUvRSxLQUFLNkUsRUFBSzNMLElBQzVDa0UsRUFBRzRDLEtBQUssS0FBTTZFLEVBQUkzTCxHQUFNQSxFQUFLMkwsR0FvRnJDdFAsRUFBT0MsUUFBVSxDQUNmOEwsUUFBU0EsRUFDVHJCLGNBcFJGLFNBQXVCaEgsR0FDckIsTUFBOEIseUJBQXZCcUMsRUFBUzBFLEtBQUsvRyxJQW9SckJpSCxTQWhTRixTQUFrQmpILEdBQ2hCLE9BQWUsT0FBUkEsSUFBaUJJLEVBQVlKLElBQTRCLE9BQXBCQSxFQUFJK0wsY0FBeUIzTCxFQUFZSixFQUFJK0wsY0FDaEQsbUJBQTdCL0wsRUFBSStMLFlBQVk5RSxVQUEyQmpILEVBQUkrTCxZQUFZOUUsU0FBU2pILElBK1JoRnpDLFdBNVFGLFNBQW9CeUMsR0FDbEIsTUFBNEIsb0JBQWJnTSxVQUE4QmhNLGFBQWVnTSxVQTRRNUQzRSxrQkFuUUYsU0FBMkJySCxHQU96QixNQUw0QixvQkFBaEJpTSxhQUFpQ0EsWUFBa0IsT0FDcERBLFlBQVlDLE9BQU9sTSxHQUVuQixHQUFVQSxFQUFVLFFBQU1BLEVBQUlzSCxrQkFBa0IyRSxhQStQM0QzQyxTQXBQRixTQUFrQnRKLEdBQ2hCLE1BQXNCLGlCQUFSQSxHQW9QZG1KLFNBM09GLFNBQWtCbkosR0FDaEIsTUFBc0IsaUJBQVJBLEdBMk9kaUcsU0FBVUEsRUFDVjdGLFlBQWFBLEVBQ2JtSSxPQTFORixTQUFnQnZJLEdBQ2QsTUFBOEIsa0JBQXZCcUMsRUFBUzBFLEtBQUsvRyxJQTBOckJtSCxPQWpORixTQUFnQm5ILEdBQ2QsTUFBOEIsa0JBQXZCcUMsRUFBUzBFLEtBQUsvRyxJQWlOckJvSCxPQXhNRixTQUFnQnBILEdBQ2QsTUFBOEIsa0JBQXZCcUMsRUFBUzBFLEtBQUsvRyxJQXdNckIyTCxXQUFZQSxFQUNaekUsU0F0TEYsU0FBa0JsSCxHQUNoQixPQUFPaUcsRUFBU2pHLElBQVEyTCxFQUFXM0wsRUFBSW1NLE9Bc0x2QzVFLGtCQTdLRixTQUEyQnZILEdBQ3pCLE1BQWtDLG9CQUFwQm9NLGlCQUFtQ3BNLGFBQWVvTSxpQkE2S2hFN00scUJBakpGLFdBQ0UsT0FBeUIsb0JBQWR5SyxXQUFvRCxnQkFBdEJBLFVBQVVxQyxTQUNZLGlCQUF0QnJDLFVBQVVxQyxTQUNZLE9BQXRCckMsVUFBVXFDLFVBSS9CLG9CQUFYdEIsUUFDYSxvQkFBYnhCLFVBMElUeEosUUFBU0EsRUFDVCtELE1BL0VGLFNBQVNBLElBQ1AsSUFBSXdJLEVBQVMsR0FDYixTQUFTQyxFQUFZdk0sRUFBS0MsR0FDRyxpQkFBaEJxTSxFQUFPck0sSUFBb0MsaUJBQVJELEVBQzVDc00sRUFBT3JNLEdBQU82RCxFQUFNd0ksRUFBT3JNLEdBQU1ELEdBRWpDc00sRUFBT3JNLEdBQU9ELEVBSWxCLElBQUssSUFBSStILEVBQUksRUFBRzhELEVBQUkxSSxVQUFVTyxPQUFRcUUsRUFBSThELEVBQUc5RCxJQUMzQ2hJLEVBQVFvRCxVQUFVNEUsR0FBSXdFLEdBRXhCLE9BQU9ELEdBbUVQcEcsVUF4REYsU0FBU0EsSUFDUCxJQUFJb0csRUFBUyxHQUNiLFNBQVNDLEVBQVl2TSxFQUFLQyxHQUNHLGlCQUFoQnFNLEVBQU9yTSxJQUFvQyxpQkFBUkQsRUFDNUNzTSxFQUFPck0sR0FBT2lHLEVBQVVvRyxFQUFPck0sR0FBTUQsR0FFckNzTSxFQUFPck0sR0FEaUIsaUJBQVJELEVBQ0ZrRyxFQUFVLEdBQUlsRyxHQUVkQSxFQUlsQixJQUFLLElBQUkrSCxFQUFJLEVBQUc4RCxFQUFJMUksVUFBVU8sT0FBUXFFLEVBQUk4RCxFQUFHOUQsSUFDM0NoSSxFQUFRb0QsVUFBVTRFLEdBQUl3RSxHQUV4QixPQUFPRCxHQTBDUDlLLE9BL0JGLFNBQWdCZ0wsRUFBR0MsRUFBRzdFLEdBUXBCLE9BUEE3SCxFQUFRME0sR0FBRyxTQUFxQnpNLEVBQUtDLEdBRWpDdU0sRUFBRXZNLEdBREEySCxHQUEwQixtQkFBUjVILEVBQ1hnQixFQUFLaEIsRUFBSzRILEdBRVY1SCxLQUdOd00sR0F3QlBqQixLQXpLRixTQUFjbUIsR0FDWixPQUFPQSxFQUFJN0ksUUFBUSxPQUFRLElBQUlBLFFBQVEsT0FBUSxPLDJFQzNLN0M4SSxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3QmxKLEtBQUssQ0FBQ25ILEVBQU80SCxHQUFJLG9pQkFBaWpCLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLDRDQUE0QyxNQUFRLEdBQUcsU0FBVywrUUFBK1EsZUFBaUIsQ0FBQywydEJBQTJ0QixXQUFhLE1BRWhzRCxXLHFCQ0RBNUgsRUFBT0MsUUFBVSxTQUFVcVEsR0FDekIsSUFBSUMsRUFBTyxHQTZGWCxPQTNGQUEsRUFBS3hLLFNBQVcsV0FDZCxPQUFPRCxLQUFLMEssS0FBSSxTQUFVQyxHQUN4QixJQUFJQyxFQUFVLEdBQ1ZDLE9BQStCLElBQVpGLEVBQUssR0E0QjVCLE9BMUJJQSxFQUFLLEtBQ1BDLEdBQVcsY0FBYzVHLE9BQU8yRyxFQUFLLEdBQUksUUFHdkNBLEVBQUssS0FDUEMsR0FBVyxVQUFVNUcsT0FBTzJHLEVBQUssR0FBSSxPQUduQ0UsSUFDRkQsR0FBVyxTQUFTNUcsT0FBTzJHLEVBQUssR0FBR3JKLE9BQVMsRUFBSSxJQUFJMEMsT0FBTzJHLEVBQUssSUFBTSxHQUFJLE9BRzVFQyxHQUFXSixFQUF1QkcsR0FFOUJFLElBQ0ZELEdBQVcsS0FHVEQsRUFBSyxLQUNQQyxHQUFXLEtBR1RELEVBQUssS0FDUEMsR0FBVyxLQUdOQSxLQUNOdkUsS0FBSyxLQUlWb0UsRUFBSzlFLEVBQUksU0FBV21GLEVBQVNDLEVBQU9DLEVBQVFDLEVBQVVDLEdBQzdCLGlCQUFaSixJQUNUQSxFQUFVLENBQUMsQ0FBQyxLQUFNQSxPQUFTck4sS0FHN0IsSUFBSTBOLEVBQXlCLEdBRTdCLEdBQUlILEVBQ0YsSUFBSyxJQUFJSSxFQUFJLEVBQUdBLEVBQUlwTCxLQUFLc0IsT0FBUThKLElBQUssQ0FDcEMsSUFBSXRKLEVBQUs5QixLQUFLb0wsR0FBRyxHQUVQLE1BQU50SixJQUNGcUosRUFBdUJySixJQUFNLEdBS25DLElBQUssSUFBSXVKLEVBQUssRUFBR0EsRUFBS1AsRUFBUXhKLE9BQVErSixJQUFNLENBQzFDLElBQUlWLEVBQU8sR0FBRzNHLE9BQU84RyxFQUFRTyxJQUV6QkwsR0FBVUcsRUFBdUJSLEVBQUssV0FJckIsSUFBVk8sU0FDYyxJQUFaUCxFQUFLLEtBR2RBLEVBQUssR0FBSyxTQUFTM0csT0FBTzJHLEVBQUssR0FBR3JKLE9BQVMsRUFBSSxJQUFJMEMsT0FBTzJHLEVBQUssSUFBTSxHQUFJLE1BQU0zRyxPQUFPMkcsRUFBSyxHQUFJLE1BRi9GQSxFQUFLLEdBQUtPLEdBT1ZILElBQ0dKLEVBQUssSUFHUkEsRUFBSyxHQUFLLFVBQVUzRyxPQUFPMkcsRUFBSyxHQUFJLE1BQU0zRyxPQUFPMkcsRUFBSyxHQUFJLEtBQzFEQSxFQUFLLEdBQUtJLEdBSFZKLEVBQUssR0FBS0ksR0FPVkUsSUFDR04sRUFBSyxJQUdSQSxFQUFLLEdBQUssY0FBYzNHLE9BQU8yRyxFQUFLLEdBQUksT0FBTzNHLE9BQU8yRyxFQUFLLEdBQUksS0FDL0RBLEVBQUssR0FBS00sR0FIVk4sRUFBSyxHQUFLLEdBQUczRyxPQUFPaUgsSUFPeEJSLEVBQUtwSixLQUFLc0osTUFJUEYsSSxxQkNsR1R2USxFQUFPQyxRQUFVLFNBQVV3USxHQUN6QixJQUFJQyxFQUFVRCxFQUFLLEdBQ2ZXLEVBQWFYLEVBQUssR0FFdEIsSUFBS1csRUFDSCxPQUFPVixFQUdULEdBQW9CLG1CQUFUbFAsS0FBcUIsQ0FDOUIsSUFBSTZQLEVBQVM3UCxLQUFLOFAsU0FBUzFGLG1CQUFtQlYsS0FBS0MsVUFBVWlHLE1BQ3pEdFEsRUFBTywrREFBK0RnSixPQUFPdUgsR0FDN0VFLEVBQWdCLE9BQU96SCxPQUFPaEosRUFBTSxPQUNwQzBRLEVBQWFKLEVBQVdLLFFBQVFqQixLQUFJLFNBQVVqSyxHQUNoRCxNQUFPLGlCQUFpQnVELE9BQU9zSCxFQUFXTSxZQUFjLElBQUk1SCxPQUFPdkQsRUFBUSxVQUU3RSxNQUFPLENBQUNtSyxHQUFTNUcsT0FBTzBILEdBQVkxSCxPQUFPLENBQUN5SCxJQUFnQnBGLEtBQUssTUFHbkUsTUFBTyxDQUFDdUUsR0FBU3ZFLEtBQUssUSxpTENUcEJ3RixFQUFVLEdBRWRBLEVBQVFDLGtCQUFvQixJQUM1QkQsRUFBUUUsY0FBZ0IsSUFFbEJGLEVBQVFHLE9BQVMsU0FBYyxLQUFNLFFBRTNDSCxFQUFRSSxPQUFTLElBQ2pCSixFQUFRSyxtQkFBcUIsSUFFaEIsSUFBSSxJQUFTTCxHQUtuQixRQUFlLEtBQVcsV0FBaUIsZ0JBQWlCcE8sRyxxQkN4Qm5FLElBQUkwTyxFQUFjLEdBRWxCLFNBQVNDLEVBQXFCQyxHQUc1QixJQUZBLElBQUluQyxHQUFVLEVBRUx2RSxFQUFJLEVBQUdBLEVBQUl3RyxFQUFZN0ssT0FBUXFFLElBQ3RDLEdBQUl3RyxFQUFZeEcsR0FBRzBHLGFBQWVBLEVBQVksQ0FDNUNuQyxFQUFTdkUsRUFDVCxNQUlKLE9BQU91RSxFQUdULFNBQVNvQyxFQUFhN0IsRUFBTW9CLEdBSTFCLElBSEEsSUFBSVUsRUFBYSxHQUNiQyxFQUFjLEdBRVQ3RyxFQUFJLEVBQUdBLEVBQUk4RSxFQUFLbkosT0FBUXFFLElBQUssQ0FDcEMsSUFBSWdGLEVBQU9GLEVBQUs5RSxHQUNaN0QsRUFBSytKLEVBQVFZLEtBQU85QixFQUFLLEdBQUtrQixFQUFRWSxLQUFPOUIsRUFBSyxHQUNsRCtCLEVBQVFILEVBQVd6SyxJQUFPLEVBQzFCdUssRUFBYSxHQUFHckksT0FBT2xDLEVBQUksS0FBS2tDLE9BQU8wSSxHQUMzQ0gsRUFBV3pLLEdBQU00SyxFQUFRLEVBQ3pCLElBQUlDLEVBQW9CUCxFQUFxQkMsR0FDekM3QyxFQUFNLENBQ1JvRCxJQUFLakMsRUFBSyxHQUNWSSxNQUFPSixFQUFLLEdBQ1prQyxVQUFXbEMsRUFBSyxHQUNoQk0sU0FBVU4sRUFBSyxHQUNmTyxNQUFPUCxFQUFLLElBR2QsSUFBMkIsSUFBdkJnQyxFQUNGUixFQUFZUSxHQUFtQkcsYUFDL0JYLEVBQVlRLEdBQW1CSSxRQUFRdkQsT0FDbEMsQ0FDTCxJQUFJdUQsRUFBVUMsRUFBZ0J4RCxFQUFLcUMsR0FDbkNBLEVBQVFvQixRQUFVdEgsRUFDbEJ3RyxFQUFZZSxPQUFPdkgsRUFBRyxFQUFHLENBQ3ZCMEcsV0FBWUEsRUFDWlUsUUFBU0EsRUFDVEQsV0FBWSxJQUloQk4sRUFBWW5MLEtBQUtnTCxHQUduQixPQUFPRyxFQUdULFNBQVNRLEVBQWdCeEQsRUFBS3FDLEdBQzVCLElBQUlzQixFQUFNdEIsRUFBUUksT0FBT0osR0FlekIsT0FkQXNCLEVBQUlDLE9BQU81RCxHQUVHLFNBQWlCNkQsR0FDN0IsR0FBSUEsRUFBUSxDQUNWLEdBQUlBLEVBQU9ULE1BQVFwRCxFQUFJb0QsS0FBT1MsRUFBT3RDLFFBQVV2QixFQUFJdUIsT0FBU3NDLEVBQU9SLFlBQWNyRCxFQUFJcUQsV0FBYVEsRUFBT3BDLFdBQWF6QixFQUFJeUIsVUFBWW9DLEVBQU9uQyxRQUFVMUIsRUFBSTBCLE1BQ3pKLE9BR0ZpQyxFQUFJQyxPQUFPNUQsRUFBTTZELFFBRWpCRixFQUFJNUYsVUFPVnJOLEVBQU9DLFFBQVUsU0FBVXNRLEVBQU1vQixHQUcvQixJQUFJeUIsRUFBa0JoQixFQUR0QjdCLEVBQU9BLEdBQVEsR0FEZm9CLEVBQVVBLEdBQVcsSUFHckIsT0FBTyxTQUFnQjBCLEdBQ3JCQSxFQUFVQSxHQUFXLEdBRXJCLElBQUssSUFBSTVILEVBQUksRUFBR0EsRUFBSTJILEVBQWdCaE0sT0FBUXFFLElBQUssQ0FDL0MsSUFDSTZILEVBQVFwQixFQURLa0IsRUFBZ0IzSCxJQUVqQ3dHLEVBQVlxQixHQUFPVixhQUtyQixJQUZBLElBQUlXLEVBQXFCbkIsRUFBYWlCLEVBQVMxQixHQUV0QzZCLEVBQUssRUFBR0EsRUFBS0osRUFBZ0JoTSxPQUFRb00sSUFBTSxDQUNsRCxJQUVJQyxFQUFTdkIsRUFGS2tCLEVBQWdCSSxJQUlLLElBQW5DdkIsRUFBWXdCLEdBQVFiLGFBQ3RCWCxFQUFZd0IsR0FBUVosVUFFcEJaLEVBQVllLE9BQU9TLEVBQVEsSUFJL0JMLEVBQWtCRyxLLHFCQ25HdEIsSUFBSUcsRUFBTyxHQW9DWDFULEVBQU9DLFFBVlAsU0FBMEI2UixFQUFRNkIsR0FDaEMsSUFBSUMsRUF4Qk4sU0FBbUJBLEdBQ2pCLFFBQTRCLElBQWpCRixFQUFLRSxHQUF5QixDQUN2QyxJQUFJQyxFQUFjNUcsU0FBUzZHLGNBQWNGLEdBRXpDLEdBQUluRixPQUFPc0YsbUJBQXFCRixhQUF1QnBGLE9BQU9zRixrQkFDNUQsSUFHRUYsRUFBY0EsRUFBWUcsZ0JBQWdCQyxLQUMxQyxNQUFPbFEsR0FFUDhQLEVBQWMsS0FJbEJILEVBQUtFLEdBQVVDLEVBR2pCLE9BQU9ILEVBQUtFLEdBTUNNLENBQVVwQyxHQUV2QixJQUFLOEIsRUFDSCxNQUFNLElBQUl2TCxNQUFNLDJHQUdsQnVMLEVBQU9PLFlBQVlSLEsscUJDekJyQjNULEVBQU9DLFFBUFAsU0FBNEIwUixHQUMxQixJQUFJeUMsRUFBVW5ILFNBQVNZLGNBQWMsU0FHckMsT0FGQThELEVBQVFFLGNBQWN1QyxFQUFTekMsRUFBUTBDLFlBQ3ZDMUMsRUFBUUcsT0FBT3NDLEVBQVN6QyxFQUFRQSxTQUN6QnlDLEksMkJDSVRwVSxFQUFPQyxRQVJQLFNBQXdDcVUsR0FDdEMsSUFBSUMsRUFBbUQsS0FFbkRBLEdBQ0ZELEVBQWF0RyxhQUFhLFFBQVN1RyxLLHFCQzhEdkN2VSxFQUFPQyxRQVpQLFNBQWdCMFIsR0FDZCxJQUFJMkMsRUFBZTNDLEVBQVFLLG1CQUFtQkwsR0FDOUMsTUFBTyxDQUNMdUIsT0FBUSxTQUFnQjVELElBekQ1QixTQUFlZ0YsRUFBYzNDLEVBQVNyQyxHQUNwQyxJQUFJb0QsRUFBTSxHQUVOcEQsRUFBSXlCLFdBQ04yQixHQUFPLGNBQWM1SSxPQUFPd0YsRUFBSXlCLFNBQVUsUUFHeEN6QixFQUFJdUIsUUFDTjZCLEdBQU8sVUFBVTVJLE9BQU93RixFQUFJdUIsTUFBTyxPQUdyQyxJQUFJRixPQUFpQyxJQUFkckIsRUFBSTBCLE1BRXZCTCxJQUNGK0IsR0FBTyxTQUFTNUksT0FBT3dGLEVBQUkwQixNQUFNNUosT0FBUyxFQUFJLElBQUkwQyxPQUFPd0YsRUFBSTBCLE9BQVMsR0FBSSxPQUc1RTBCLEdBQU9wRCxFQUFJb0QsSUFFUC9CLElBQ0YrQixHQUFPLEtBR0xwRCxFQUFJdUIsUUFDTjZCLEdBQU8sS0FHTHBELEVBQUl5QixXQUNOMkIsR0FBTyxLQUdULElBQUlDLEVBQVlyRCxFQUFJcUQsVUFFaEJBLEdBQTZCLG9CQUFUblIsT0FDdEJrUixHQUFPLHVEQUF1RDVJLE9BQU90SSxLQUFLOFAsU0FBUzFGLG1CQUFtQlYsS0FBS0MsVUFBVXdILE1BQWUsUUFNdEloQixFQUFRQyxrQkFBa0JjLEVBQUs0QixFQUFjM0MsRUFBUUEsU0FrQmpEakcsQ0FBTTRJLEVBQWMzQyxFQUFTckMsSUFFL0JqQyxPQUFRLFlBakJaLFNBQTRCaUgsR0FFMUIsR0FBZ0MsT0FBNUJBLEVBQWFFLFdBQ2YsT0FBTyxFQUdURixFQUFhRSxXQUFXQyxZQUFZSCxHQVloQ0ksQ0FBbUJKLE8scUJDakR6QnRVLEVBQU9DLFFBWlAsU0FBMkJ5UyxFQUFLNEIsR0FDOUIsR0FBSUEsRUFBYUssV0FDZkwsRUFBYUssV0FBV0MsUUFBVWxDLE1BQzdCLENBQ0wsS0FBTzRCLEVBQWFPLFlBQ2xCUCxFQUFhRyxZQUFZSCxFQUFhTyxZQUd4Q1AsRUFBYUgsWUFBWWxILFNBQVM2SCxlQUFlcEMsTyxjQ1hyRCxNQUFNdk4sRUFBUSxFQUFRLEtBRXRCLElBQUk0UCxFQUFTLEVBdUxiLFNBQVNDLEVBQVFDLEdBQ2IsT0FBSUEsRUFDR0EsRUFBRWxHLE1BQU0sS0FBSzVDLEtBQUssS0FEWDhJLEVBdExsQmpWLEVBQU9DLFFBQVUsQ0FDYmlWLFVBQVV2UixHQUNOb1IsRUFBU3BSLEdBRWJ3UixjQUFtQixNQUFDck0sSUFDaEJBLEVBQU9rTSxFQUFRbE0sVUFDRDNELEVBQU1pUSxJQUFJLDJDQUEyQ0wsdUJBQTRCak0sTUFBU2hJLE1BRTVHcVUsbUJBQXdCLE1BQUNoTixJQUNyQkEsRUFBTzZNLEVBQVE3TSxVQUNEaEQsRUFBTWlRLElBQUksMkNBQTJDTCwyQkFBZ0M1TSxNQUFTckgsTUFFaEhxVSxvQkFBeUIsTUFBQ3JNLElBQ3RCQSxFQUFPa00sRUFBUWxNLFVBQ0QzRCxFQUFNaVEsSUFBSSwyQ0FBMkNMLHlCQUE4QmpNLE1BQVNoSSxNQUU5R3FVLHNCQUFzQnJNLEVBQU11TSxHQUN4QnZNLEVBQU9rTSxFQUFRbE0sR0FDZnVNLEVBQU9MLEVBQVFLLEdBQ2YsSUFBSXRULEVBQVMsR0FHYixPQUZBQSxFQUFPb0YsS0FBSyxLQUFLMkIsS0FDZHVNLEdBQU10VCxFQUFPb0YsS0FBSyxLQUFLa08sWUFDWmxRLEVBQU1pUSxJQUFJLDJDQUEyQ0wsdUJBQTRCaFQsRUFBT29LLEtBQUssU0FBU3JMLE1BRXhIcVUscUJBQXFCck0sRUFBTXdNLEdBQ3ZCeE0sRUFBT2tNLEVBQVFsTSxHQUNmd00sRUFBU04sRUFBUU0sR0FDakIsSUFBSXZULEVBQVMsR0FHYixPQUZBQSxFQUFPb0YsS0FBSyxLQUFLMkIsS0FDZHdNLEdBQVF2VCxFQUFPb0YsS0FBSyxLQUFLbU8sWUFDZG5RLEVBQU1pUSxJQUFJLDJDQUEyQ0wsc0JBQTJCaFQsRUFBT29LLEtBQUssU0FBU3JMLE1BRXZIcVUsY0FBbUIsZ0JBQ0RoUSxFQUFNaVEsSUFBSSwyQ0FBMkNMLHFCQUEwQmpVLEtBRWpHcVUsY0FBbUIsZ0JBQ0RoUSxFQUFNaVEsSUFBSSwyQ0FBMkNMLHNCQUEyQmpVLEtBRWxHcVUsZUFBb0IsZ0JBQ0ZoUSxFQUFNaVEsSUFBSSwyQ0FBMkNMLHdCQUE2QmpVLEtBRXBHcVUsNkJBQTZCSSxFQUFTQyxHQUNsQ0QsRUFBVVAsRUFBUU8sR0FDbEJDLEVBQVFSLEVBQVFRLEdBQ2hCLElBQUl6VCxFQUFTLEdBR2IsT0FGQUEsRUFBT29GLEtBQUssS0FBS29PLEtBQ2RDLEdBQU96VCxFQUFPb0YsS0FBSyxLQUFLcU8sWUFDYnJRLEVBQU1pUSxJQUFJLDJDQUEyQ0wsNEJBQWlDaFQsRUFBT29LLEtBQUssU0FBU3JMLE1BRTdIcVUsdUJBQTRCLE1BQUN2TixVQUNYekMsRUFBTWlRLElBQUksMkNBQTJDTCwrQkFBb0NuTixNQUFPOUcsS0FFbEhxVSxxQkFBMEIsTUFBQ3JNLElBQ3ZCQSxFQUFPa00sRUFBUWxNLFVBQ0QzRCxFQUFNaVEsSUFBSSwyQ0FBMkNMLDRCQUFpQ2pNLE1BQVNoSSxNQUVqSHFVLHFCQUEwQixNQUFDck0sSUFDdkJBLEVBQU9rTSxFQUFRbE0sVUFDRDNELEVBQU1pUSxJQUFJLDJDQUEyQ0wsNEJBQWlDak0sTUFBU2hJLE1BRWpIcVUsMEJBQStCLE1BQUNLLEVBQU9ELEtBQ25DQSxFQUFVUCxFQUFRTyxHQUNsQkMsRUFBUVIsRUFBUVEsVUFDRnJRLEVBQU1pUSxJQUFJLDJDQUEyQ0wsNEJBQWlDUyxPQUFXRCxNQUFZelUsTUFLL0hxVSxtQkFBd0IsTUFBQ3ZOLFVBQ1B6QyxFQUFNaVEsSUFBSSwyQ0FBMkNMLCtCQUFvQ25OLE1BQU85RyxLQUVsSHFVLGNBQW1CLE1BQUNNLElBQ2hCQSxFQUFPVCxFQUFRUyxVQUNEdFEsRUFBTWlRLElBQUksMkNBQTJDTCx1QkFBNEJVLE1BQVMzVSxNQUU1R3FVLHFCQUEwQixNQUFDdk4sVUFDVHpDLEVBQU1pUSxJQUFJLDJDQUEyQ0wseUJBQThCbk4sTUFBTzlHLEtBRTVHcVUsbUJBQXdCLE1BQUN2TixVQUNQekMsRUFBTWlRLElBQUksMkNBQTJDTCx1QkFBNEJuTixNQUFPOUcsS0FFMUdxVSxxQkFBMEIsTUFBQ3ZOLFVBQ1R6QyxFQUFNaVEsSUFBSSwyQ0FBMkNMLHlCQUE4Qm5OLE1BQU85RyxLQUU1R3FVLG9CQUF5QixNQUFDdk4sVUFDUnpDLEVBQU1pUSxJQUFJLDJDQUEyQ0wsd0JBQTZCbk4sTUFBTzlHLEtBRTNHcVUscUJBQTBCLE1BQUN2TixVQUNUekMsRUFBTWlRLElBQUksMkNBQTJDTCx5QkFBOEJuTixNQUFPOUcsS0FFNUdxVSx5QkFBOEIsTUFBQ3ZOLFVBQ2J6QyxFQUFNaVEsSUFBSSwyQ0FBMkNMLDhCQUFtQ25OLE1BQU85RyxLQUVqSHFVLHVCQUE0QixNQUFDdk4sVUFDWHpDLEVBQU1pUSxJQUFJLDJDQUEyQ0wsNEJBQWlDbk4sTUFBTzlHLEtBRS9HcVUsb0JBQXlCLE1BQUN2TixVQUNSekMsRUFBTWlRLElBQUksMkNBQTJDTCx5QkFBOEJuTixNQUFPOUcsS0FFNUdxVSxlQUFvQixNQUFDdk4sVUFDSHpDLEVBQU1pUSxJQUFJLDJDQUEyQ0wscUJBQTBCbk4sTUFBTzlHLEtBRXhHcVUsa0NBQXVDLE1BQUN2TixFQUFJME4sV0FDMUJuUSxFQUFNaVEsSUFBSSwyQ0FBMkNMLHVCQUE0Qm5OLE9BQVEwTixNQUFXeFUsS0FFdEhxVSx1QkFBNEIsTUFBQ3ZOLFVBQ1h6QyxFQUFNaVEsSUFBSSwyQ0FBMkNMLHVCQUE0Qm5OLE1BQU85RyxLQUUxR3FVLDBCQUErQixNQUFDdk4sVUFDZHpDLEVBQU1pUSxJQUFJLDJDQUEyQ0wsdUJBQTRCbk4sTUFBTzlHLEtBRTFHcVUsdUJBQTRCLE1BQUN2TixVQUNYekMsRUFBTWlRLElBQUksMkNBQTJDTCx1QkFBNEJuTixNQUFPOUcsS0FFMUdxVSwwQkFBK0IsTUFBQ3ZOLFVBQ2R6QyxFQUFNaVEsSUFBSSwyQ0FBMkNMLDZCQUFrQ25OLE1BQU85RyxLQUVoSHFVLGlCQUFzQixNQUFDdk4sRUFBSThOLEVBQU9KLFdBQ2hCblEsRUFBTWlRLElBQUksMkNBQTJDTCx3QkFBNkJuTixPQUFROE4sT0FBV0osTUFBV3hVLEtBRWxJcVUscUJBQXFCUSxFQUFLSCxFQUFPMU0sR0FDN0IwTSxFQUFRUixFQUFRUSxHQUNoQjFNLEVBQU9rTSxFQUFRbE0sR0FDZixJQUFJL0csRUFBUyxHQUliLE9BSEc0VCxHQUFLNVQsRUFBT29GLEtBQUssS0FBS3dPLEtBQ3RCN00sR0FBTS9HLEVBQU9vRixLQUFLLEtBQUsyQixLQUN2QjBNLEdBQU96VCxFQUFPb0YsS0FBSyxLQUFLcU8sWUFDYnJRLEVBQU1pUSxJQUFJLDJDQUEyQ0wsbUJBQXdCaFQsRUFBT29LLEtBQUssU0FBU3JMLE1BRXBIcVUsdUJBQXVCUSxFQUFLSCxFQUFPRCxHQUMvQkMsRUFBUVIsRUFBUVEsR0FDaEJELEVBQVVQLEVBQVFPLEdBQ2xCLElBQUl4VCxFQUFTLEdBSWIsT0FIRzRULEdBQUs1VCxFQUFPb0YsS0FBSyxLQUFLd08sS0FDdEJKLEdBQVN4VCxFQUFPb0YsS0FBSyxLQUFLeU8sVUFDMUJKLEdBQU96VCxFQUFPb0YsS0FBSyxLQUFLcU8sWUFDYnJRLEVBQU1pUSxJQUFJLDJDQUEyQ0wsa0JBQXVCaFQsRUFBT29LLEtBQUssU0FBU3JMLE1BRW5IcVUscUJBQTBCLE1BQUNVLElBQ3ZCQSxFQUFVYixFQUFRYSxVQUNKMVEsRUFBTWlRLElBQUksMkNBQTJDTCxvQkFBeUJjLE1BQVkvVSxNQUU1R3FVLDZCQUFrQyxNQUFDdk4sRUFBSTBOLFdBQ3JCblEsRUFBTWlRLElBQUksMkNBQTJDTCx5QkFBOEJuTixPQUFRME4sTUFBV3hVLEtBRXhIcVUsU0FBYyxNQUFDdk4sVUFDR3pDLEVBQU1pUSxJQUFJLDBEQUEwRHhOLFVBQVc5RyxLQUVqR3FVLGdCQUFxQixNQUFDdk4sVUFDSnpDLEVBQU1pUSxJQUFJLDBEQUEwRHhOLGtCQUFtQjlHLEtBRXpHcVUsK0JBQStCUSxFQUFLQyxFQUFRSixHQUN4Q0ksRUFBU1osRUFBUVksR0FDakJKLEVBQVFSLEVBQVFRLEdBQ2hCLElBQUlQLEVBQUksR0FJUixPQUhHVSxHQUFLVixFQUFFOU4sS0FBSyxLQUFLd08sS0FDakJDLEdBQVFYLEVBQUU5TixLQUFLLEtBQUt5TyxLQUNwQkosR0FBT1AsRUFBRTlOLEtBQUssS0FBS3FPLFlBQ1JyUSxFQUFNaVEsSUFBSSwyQ0FBMkNMLDBCQUErQkUsRUFBRTlJLEtBQUssU0FBU3JMLE1BRXRIcVUsZ0NBQXFDLE1BQUN2TixFQUFJME4sV0FDeEJuUSxFQUFNaVEsSUFBSSwyQ0FBMkNMLHlCQUE4Qm5OLE9BQVEwTixNQUFXeFUsS0FFeEhxVSxvQkFBeUIsZ0JBQ1BoUSxFQUFNaVEsSUFBSSwyQ0FBMkNMLHVCQUE0QmpVLEtBRW5HcVUscUJBQTBCLE1BQUNLLElBQ3ZCQSxFQUFRUixFQUFRUSxVQUNGclEsRUFBTWlRLElBQUksMkNBQTJDTCxxQkFBMEJTLE1BQVUxVSxNQUUzR3FVLGtCQUF1QixnQkFDTGhRLEVBQU1pUSxJQUFJLDJDQUEyQ0wscUJBQTBCalUsS0FFakdxVSx3QkFBNkIsZ0JBQ1hoUSxFQUFNaVEsSUFBSSwyQ0FBMkNMLDJCQUFnQ2pVLEtBRXZHcVUsOEJBQW1DLGdCQUNqQmhRLEVBQU1pUSxJQUFJLDJDQUEyQ0wsaUNBQXNDalUsTyxpOUNDcExqSCxNQUNBLGFBd0JNZ1YsRUFBWSxTQUFPQyxHQUFpQiwwQyw0REFJUCxPQUgzQjlJLFNBQVMrSSx1QkFBdUIsbUJBQW1CLElBQ25EL0ksU0FBU2dKLEtBQUt4QixZQUFZeEgsU0FBUytJLHVCQUF1QixtQkFBbUIsSUFDM0VwQyxFQUFVbUMsRUFBTW5DLE9BQ1MsSUFBTSxJQUFBc0Msa0JBQWlCdEMsRUFBT3VDLFksY0FBekRDLEVBQTJCLFVBQ3pCQyxFQUFNcEosU0FBU1ksY0FBYyxRQUMvQnlJLFVBQVVDLElBQUksbUJBRWxCSCxFQUFXM1MsU0FBUSxTQUFBNFIsR0FDZixJQUFNbUIsRUFBV3ZKLFNBQVNZLGNBQWMsS0FDeEMsR0FBSXdILEVBQUtvQixLQUFNLENBQ1gsSUFBTUEsRUFBT3hKLFNBQVNZLGNBQWMsT0FDcEM0SSxFQUFLSCxVQUFVQyxJQUFJLGtCQUNuQkUsRUFBS0MsSUFBTXJCLEVBQUtvQixLQUNoQkQsRUFBU3JDLFlBQVlzQyxHQUV6QkQsRUFBU0csV0FBYXRCLEVBQUt2TSxLQUMzQnVOLEVBQUlsQyxZQUFZcUMsTUFHcEJ2SixTQUFTZ0osS0FBSzlCLFlBQVlrQyxHQUUxQk8sUUFBUUMsSUFBSVQsRyxZQTVDUSxtQyw0REFDQSxVQUFNLElBQUFVLG9CLGNBQXBCQyxFQUFjLFNBQ2RDLEVBQU8vSixTQUFTWSxjQUFjLFFBRTlCb0osRUFBVWhLLFNBQVNZLGNBQWMsT0FDL0J5SSxVQUFVQyxJQUFJLFFBRXRCUSxFQUFZdFQsU0FBUSxTQUFBMlEsR0FDaEIsSUFBTThDLEVBQVdqSyxTQUFTWSxjQUFjLE1BQ2xDc0osRUFBTWxLLFNBQVNZLGNBQWMsVUFDbkNzSixFQUFJQyxTQUFXTCxFQUFZelUsUUFBUThSLEdBQ25DK0MsRUFBSXZQLEdBQUt3TSxFQUNUK0MsRUFBSUUsWUFBY2pELEVBQ2xCK0MsRUFBSWxULGlCQUFpQixRQUFTNlIsR0FDOUJvQixFQUFTL0MsWUFBWWdELEdBQ3JCRixFQUFROUMsWUFBWStDLE1BR3hCRixFQUFLN0MsWUFBWThDLEdBQ2pCaEssU0FBU2dKLEtBQUs5QixZQUFZNkMsRyx5Z0RDdkI5QixJQUFNTSxFQUFjLEVBQVEsS0FPZixFQUFBUixnQkFBa0IscUQsd0RBR1gsT0FGWkMsRUFBNkIsR0FDakNPLEVBQVlwQyxVQUFVLEdBQ04sR0FBTW9DLEVBQVlDLHVCQUF1QixTQUFVLFcsT0FJbkUsT0FKZ0IsU0FDUkMsVUFBVS9ULFNBQVEsU0FBQzJRLEdBQ3ZCMkMsRUFBWTVQLEtBQUtpTixFQUFRcUQsY0FFdEIsQ0FBUCxFQUFPVixXQUdFLEVBQUFiLGlCQUFtQixTQUFPd0IsR0FBa0IsMEMsd0RBR3ZDLE9BRlZ0QixFQUEyQixHQUMvQmtCLEVBQVlwQyxVQUFVLEdBQ1IsR0FBTW9DLEVBQVlLLHFCQUFxQkQsSSxPQVFyRCxPQVJjLFNBQ1JFLE1BQU1uVSxTQUFRLFNBQUMyUSxHQUNqQixJQUFJeUQsRUFBa0IsR0FDdEJBLEVBQVMvTyxLQUFPc0wsRUFBUTBELFFBQ3hCRCxFQUFTcEIsS0FBT3JDLEVBQVEyRCxZQUN4QjNCLEVBQVdqUCxLQUFLMFEsTUFHYixDQUFQLEVBQU96QixhQzNCUDRCLEVBQTJCLEdBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUIzVSxJQUFqQjRVLEVBQ0gsT0FBT0EsRUFBYWxZLFFBR3JCLElBQUlELEVBQVNnWSxFQUF5QkUsR0FBWSxDQUNqRHRRLEdBQUlzUSxFQUVKalksUUFBUyxJQU9WLE9BSEFtWSxFQUFvQkYsR0FBVXpOLEtBQUt6SyxFQUFPQyxRQUFTRCxFQUFRQSxFQUFPQyxRQUFTZ1ksR0FHcEVqWSxFQUFPQyxRQ3BCZmdZLEVBQW9CSSxFQUFLclksSUFDeEIsSUFBSXNZLEVBQVN0WSxHQUFVQSxFQUFPdVksV0FDN0IsSUFBT3ZZLEVBQWlCLFFBQ3hCLElBQU0sRUFFUCxPQURBaVksRUFBb0JPLEVBQUVGLEVBQVEsQ0FBRXBJLEVBQUdvSSxJQUM1QkEsR0NMUkwsRUFBb0JPLEVBQUksQ0FBQ3ZZLEVBQVN3WSxLQUNqQyxJQUFJLElBQUk5VSxLQUFPOFUsRUFDWFIsRUFBb0JTLEVBQUVELEVBQVk5VSxLQUFTc1UsRUFBb0JTLEVBQUV6WSxFQUFTMEQsSUFDNUVxRyxPQUFPMk8sZUFBZTFZLEVBQVMwRCxFQUFLLENBQUVpVixZQUFZLEVBQU14RCxJQUFLcUQsRUFBVzlVLE1DSjNFc1UsRUFBb0JTLEVBQUksQ0FBQ3BKLEVBQUs1RixJQUFVTSxPQUFPL0UsVUFBVXVLLGVBQWUvRSxLQUFLNkUsRUFBSzVGLEdDQ2xGdU8sRUFBb0JZLEVBQUs1WSxJQUNILG9CQUFYNlksUUFBMEJBLE9BQU9DLGFBQzFDL08sT0FBTzJPLGVBQWUxWSxFQUFTNlksT0FBT0MsWUFBYSxDQUFFdFMsTUFBTyxXQUU3RHVELE9BQU8yTyxlQUFlMVksRUFBUyxhQUFjLENBQUV3RyxPQUFPLEtDTHZEd1IsRUFBb0JlLFFBQUt6VixFQ0dDMFUsRUFBb0IsTSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9zdGF0aWMvY3NzL3N0eWxlLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvc3RhdGljL2Nzcy9zdHlsZS5zY3NzPzRhNjQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGhlc3BvcnRzZGIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9sZWFndWVzLnRzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovLy93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCB8fCAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgdmFyIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcih0aW1lb3V0RXJyb3JNZXNzYWdlLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhheGlvcy5kZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNcbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB2YXIgdmFsdWVGcm9tQ29uZmlnMktleXMgPSBbJ3VybCcsICdtZXRob2QnLCAncGFyYW1zJywgJ2RhdGEnXTtcbiAgdmFyIG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzID0gWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknXTtcbiAgdmFyIGRlZmF1bHRUb0NvbmZpZzJLZXlzID0gW1xuICAgICdiYXNlVVJMJywgJ3VybCcsICd0cmFuc2Zvcm1SZXF1ZXN0JywgJ3RyYW5zZm9ybVJlc3BvbnNlJywgJ3BhcmFtc1NlcmlhbGl6ZXInLFxuICAgICd0aW1lb3V0JywgJ3dpdGhDcmVkZW50aWFscycsICdhZGFwdGVyJywgJ3Jlc3BvbnNlVHlwZScsICd4c3JmQ29va2llTmFtZScsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJywgJ29uVXBsb2FkUHJvZ3Jlc3MnLCAnb25Eb3dubG9hZFByb2dyZXNzJyxcbiAgICAnbWF4Q29udGVudExlbmd0aCcsICd2YWxpZGF0ZVN0YXR1cycsICdtYXhSZWRpcmVjdHMnLCAnaHR0cEFnZW50JyxcbiAgICAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsICdzb2NrZXRQYXRoJ1xuICBdO1xuXG4gIHV0aWxzLmZvckVhY2godmFsdWVGcm9tQ29uZmlnMktleXMsIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzLCBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAodXRpbHMuaXNPYmplY3QoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IHV0aWxzLmRlZXBNZXJnZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKGRlZmF1bHRUb0NvbmZpZzJLZXlzLCBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGF4aW9zS2V5cyA9IHZhbHVlRnJvbUNvbmZpZzJLZXlzXG4gICAgLmNvbmNhdChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cylcbiAgICAuY29uY2F0KGRlZmF1bHRUb0NvbmZpZzJLZXlzKTtcblxuICB2YXIgb3RoZXJLZXlzID0gT2JqZWN0XG4gICAgLmtleXMoY29uZmlnMilcbiAgICAuZmlsdGVyKGZ1bmN0aW9uIGZpbHRlckF4aW9zS2V5cyhrZXkpIHtcbiAgICAgIHJldHVybiBheGlvc0tleXMuaW5kZXhPZihrZXkpID09PSAtMTtcbiAgICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG90aGVyS2V5cywgZnVuY3Rpb24gb3RoZXJLZXlzRGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIGVxdWFsIHRvIG1lcmdlIHdpdGggdGhlIGRpZmZlcmVuY2UgYmVpbmcgdGhhdCBubyByZWZlcmVuY2VcbiAqIHRvIG9yaWdpbmFsIG9iamVjdHMgaXMga2VwdC5cbiAqXG4gKiBAc2VlIG1lcmdlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBkZWVwTWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZGVlcE1lcmdlOiBkZWVwTWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltXG59O1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIqe2JveC1zaXppbmc6Ym9yZGVyLWJveH1ib2R5e2ZvbnQtZmFtaWx5OlxcXCJHaWxsIFNhbnNcXFwiLFxcXCJHaWxsIFNhbnMgTVRcXFwiLENhbGlicmksXFxcIlRyZWJ1Y2hldCBNU1xcXCIsc2Fucy1zZXJpZjtmb250LXNpemU6MXJlbTt0ZXh0LWFsaWduOmNlbnRlcn0udGFic3tkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0O2FsaWduLWl0ZW1zOmNlbnRlcn0udGVhbXMtY29udGFpbmVye2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7YWxpZ24taXRlbXM6Y2VudGVyfS5sb2dvLWNvbnRhaW5lcnt3aWR0aDoxMDBweH1idXR0b257Zm9udC1mYW1pbHk6XFxcIkdpbGwgU2Fuc1xcXCIsXFxcIkdpbGwgU2FucyBNVFxcXCIsQ2FsaWJyaSxcXFwiVHJlYnVjaGV0IE1TXFxcIixzYW5zLXNlcmlmO2Rpc3BsYXk6ZmxleDttYXJnaW46NXB4O3dpZHRoOjEyMHB4O2JhY2tncm91bmQ6I2ZmZjtib3JkZXI6bm9uZTtwYWRkaW5nOjVweCAxMHB4O2N1cnNvcjpwb2ludGVyfXVse2xpc3Qtc3R5bGUtdHlwZTpub25lfVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3B1YmxpYy9zdGF0aWMvY3NzL3N0eWxlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsRUFDQyxxQkFBQSxDQUVELEtBQ0Msd0VBQUEsQ0FDQSxjQUFBLENBQ0EsaUJBQUEsQ0FHRCxNQUNDLFlBQUEsQ0FDQSxrQkFBQSxDQUNBLDBCQUFBLENBQ0Esa0JBQUEsQ0FHRCxpQkFDQyxZQUFBLENBQ0EscUJBQUEsQ0FDQSwwQkFBQSxDQUNBLGtCQUFBLENBR0QsZ0JBQ0MsV0FBQSxDQUdELE9BQ0Msd0VBQUEsQ0FDQSxZQUFBLENBQ0csVUFBQSxDQUNILFdBQUEsQ0FDQSxlQUFBLENBQ0EsV0FBQSxDQUNBLGdCQUFBLENBQ0EsY0FBQSxDQUdELEdBQ0ksb0JBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKiB7XFxuXFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuYm9keSB7XFxuXFx0Zm9udC1mYW1pbHk6ICdHaWxsIFNhbnMnLCAnR2lsbCBTYW5zIE1UJywgQ2FsaWJyaSwgJ1RyZWJ1Y2hldCBNUycsIHNhbnMtc2VyaWY7XFxuXFx0Zm9udC1zaXplOiAxcmVtO1xcblxcdHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLnRhYnMge1xcblxcdGRpc3BsYXk6IGZsZXg7XFxuXFx0ZmxleC1kaXJlY3Rpb246IHJvdzsgXFxuXFx0anVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0OyBcXG5cXHRhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4udGVhbXMtY29udGFpbmVyIHtcXG5cXHRkaXNwbGF5OiBmbGV4OyBcXG5cXHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcdGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgXFxuXFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLmxvZ28tY29udGFpbmVyIHtcXG5cXHR3aWR0aDogMTAwcHg7XFxufVxcblxcbmJ1dHRvbiB7XFxuXFx0Zm9udC1mYW1pbHk6ICdHaWxsIFNhbnMnLCAnR2lsbCBTYW5zIE1UJywgQ2FsaWJyaSwgJ1RyZWJ1Y2hldCBNUycsIHNhbnMtc2VyaWY7XFxuXFx0ZGlzcGxheTogZmxleDtcXG4gICAgbWFyZ2luOiA1cHg7XFxuXFx0d2lkdGg6IDEyMHB4O1xcblxcdGJhY2tncm91bmQ6ICNmZmY7XFxuXFx0Ym9yZGVyOiBub25lO1xcblxcdHBhZGRpbmc6IDVweCAxMHB4O1xcblxcdGN1cnNvcjogcG9pbnRlcjtcXHRcXG59XFxuXFxudWwge1xcbiAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxufVxcblxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsImNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcclxuXHJcbnZhciBhcGlLZXkgPSAxO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBzZXRBcGlLZXkoa2V5KXtcclxuICAgICAgICBhcGlLZXkgPSBrZXlcclxuICAgIH0sXHJcbiAgICBhc3luYyBnZXRUZWFtQnlOYW1lKG5hbWUpe1xyXG4gICAgICAgIG5hbWUgPSBtYWtlVXJsKG5hbWUpXHJcbiAgICAgICAgcmV0dXJuIChhd2FpdCBheGlvcy5nZXQoYGh0dHBzOi8vd3d3LnRoZXNwb3J0c2RiLmNvbS9hcGkvdjEvanNvbi8ke2FwaUtleX0vc2VhcmNodGVhbXMucGhwP3Q9JHtuYW1lfWApKS5kYXRhO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIGdldFRlYW1CeVNob3J0Q29kZShjb2RlKXtcclxuICAgICAgICBjb2RlID0gbWFrZVVybChjb2RlKVxyXG4gICAgICAgIHJldHVybiAoYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy50aGVzcG9ydHNkYi5jb20vYXBpL3YxL2pzb24vJHthcGlLZXl9L3NlYXJjaHRlYW1zLnBocD9zbmFtZT0ke2NvZGV9YCkpLmRhdGE7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgZ2V0QWxsUGxheWVyc0J5VGVhbShuYW1lKXtcclxuICAgICAgICBuYW1lID0gbWFrZVVybChuYW1lKVxyXG4gICAgICAgIHJldHVybiAoYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy50aGVzcG9ydHNkYi5jb20vYXBpL3YxL2pzb24vJHthcGlLZXl9L3NlYXJjaHBsYXllcnMucGhwP3Q9JHtuYW1lfWApKS5kYXRhO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIGdldFBsYXllckJ5TmFtZShuYW1lLCB0ZWFtKXtcclxuICAgICAgICBuYW1lID0gbWFrZVVybChuYW1lKVxyXG4gICAgICAgIHRlYW0gPSBtYWtlVXJsKHRlYW0pXHJcbiAgICAgICAgdmFyIHBhcmFtcyA9IFtdXHJcbiAgICAgICAgcGFyYW1zLnB1c2goYHA9JHtuYW1lfWApXHJcbiAgICAgICAgaWYodGVhbSkgcGFyYW1zLnB1c2goYHQ9JHt0ZWFtfWApXHJcbiAgICAgICAgcmV0dXJuIChhd2FpdCBheGlvcy5nZXQoYGh0dHBzOi8vd3d3LnRoZXNwb3J0c2RiLmNvbS9hcGkvdjEvanNvbi8ke2FwaUtleX0vc2VhcmNocGxheWVycy5waHA/JHtwYXJhbXMuam9pbignJicpfWApKS5kYXRhO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIGdldEV2ZW50QnlOYW1lKG5hbWUsIHNlYXNvbil7XHJcbiAgICAgICAgbmFtZSA9IG1ha2VVcmwobmFtZSlcclxuICAgICAgICBzZWFzb24gPSBtYWtlVXJsKHNlYXNvbilcclxuICAgICAgICB2YXIgcGFyYW1zID0gW11cclxuICAgICAgICBwYXJhbXMucHVzaChgZT0ke25hbWV9YClcclxuICAgICAgICBpZihzZWFzb24pIHBhcmFtcy5wdXNoKGBzPSR7c2Vhc29ufWApXHJcbiAgICAgICAgcmV0dXJuIChhd2FpdCBheGlvcy5nZXQoYGh0dHBzOi8vd3d3LnRoZXNwb3J0c2RiLmNvbS9hcGkvdjEvanNvbi8ke2FwaUtleX0vc2VhcmNoZXZlbnRzLnBocD8ke3BhcmFtcy5qb2luKCcmJyl9YCkpLmRhdGE7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgZ2V0U3BvcnRzTGlzdCgpe1xyXG4gICAgICAgIHJldHVybiAoYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy50aGVzcG9ydHNkYi5jb20vYXBpL3YxL2pzb24vJHthcGlLZXl9L2FsbF9zcG9ydHMucGhwYCkpLmRhdGE7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgZ2V0TGVhZ3VlTGlzdCgpe1xyXG4gICAgICAgIHJldHVybiAoYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy50aGVzcG9ydHNkYi5jb20vYXBpL3YxL2pzb24vJHthcGlLZXl9L2FsbF9sZWFndWVzLnBocGApKS5kYXRhO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIGdldENvdW50cnlMaXN0KCl7XHJcbiAgICAgICAgcmV0dXJuIChhd2FpdCBheGlvcy5nZXQoYGh0dHBzOi8vd3d3LnRoZXNwb3J0c2RiLmNvbS9hcGkvdjEvanNvbi8ke2FwaUtleX0vYWxsX2NvdW50cmllcy5waHBgKSkuZGF0YTtcclxuICAgIH0sXHJcbiAgICBhc3luYyBnZXRMZWFndWVMaXN0QnlDb3VudHJ5KGNvdW50cnksIHNwb3J0KXtcclxuICAgICAgICBjb3VudHJ5ID0gbWFrZVVybChjb3VudHJ5KVxyXG4gICAgICAgIHNwb3J0ID0gbWFrZVVybChzcG9ydClcclxuICAgICAgICB2YXIgcGFyYW1zID0gW11cclxuICAgICAgICBwYXJhbXMucHVzaChgYz0ke2NvdW50cnl9YClcclxuICAgICAgICBpZihzcG9ydCkgcGFyYW1zLnB1c2goYHM9JHtzcG9ydH1gKVxyXG4gICAgICAgIHJldHVybiAoYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy50aGVzcG9ydHNkYi5jb20vYXBpL3YxL2pzb24vJHthcGlLZXl9L3NlYXJjaF9hbGxfbGVhZ3Vlcy5waHA/JHtwYXJhbXMuam9pbignJicpfWApKS5kYXRhO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIGdldFNlYXNvbnNJbkxlYWd1ZUJ5SWQoaWQpe1xyXG4gICAgICAgIHJldHVybiAoYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy50aGVzcG9ydHNkYi5jb20vYXBpL3YxL2pzb24vJHthcGlLZXl9L3NlYXJjaF9hbGxfc2Vhc29ucy5waHA/aWQ9JHtpZH1gKSkuZGF0YTtcclxuICAgIH0sXHJcbiAgICBhc3luYyBnZXRUZWFtc0J5TGVhZ3VlTmFtZShuYW1lKXtcclxuICAgICAgICBuYW1lID0gbWFrZVVybChuYW1lKVxyXG4gICAgICAgIHJldHVybiAoYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy50aGVzcG9ydHNkYi5jb20vYXBpL3YxL2pzb24vJHthcGlLZXl9L3NlYXJjaF9hbGxfdGVhbXMucGhwP2w9JHtuYW1lfWApKS5kYXRhO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIGdldFRlYW1zQnlMZWFndWVOYW1lKG5hbWUpe1xyXG4gICAgICAgIG5hbWUgPSBtYWtlVXJsKG5hbWUpXHJcbiAgICAgICAgcmV0dXJuIChhd2FpdCBheGlvcy5nZXQoYGh0dHBzOi8vd3d3LnRoZXNwb3J0c2RiLmNvbS9hcGkvdjEvanNvbi8ke2FwaUtleX0vc2VhcmNoX2FsbF90ZWFtcy5waHA/bD0ke25hbWV9YCkpLmRhdGE7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgZ2V0VGVhbXNCeUNvdW50cnlBbmRTcG9ydChzcG9ydCwgY291bnRyeSl7XHJcbiAgICAgICAgY291bnRyeSA9IG1ha2VVcmwoY291bnRyeSlcclxuICAgICAgICBzcG9ydCA9IG1ha2VVcmwoc3BvcnQpXHJcbiAgICAgICAgcmV0dXJuIChhd2FpdCBheGlvcy5nZXQoYGh0dHBzOi8vd3d3LnRoZXNwb3J0c2RiLmNvbS9hcGkvdjEvanNvbi8ke2FwaUtleX0vc2VhcmNoX2FsbF90ZWFtcy5waHA/cz0ke3Nwb3J0fSZjPSR7Y291bnRyeX1gKSkuZGF0YTtcclxuICAgIH0sXHJcbiAgICAvLyBhc3luYyBnZXRUZWFtRGV0YWlsc0J5SWQoaWQpe1xyXG4gICAgLy8gICAgIHJldHVybiBheGlvcy5nZXQoYGh0dHBzOi8vd3d3LnRoZXNwb3J0c2RiLmNvbS9hcGkvdjEvanNvbi8xL2xvb2t1cF9hbGxfdGVhbXMucGhwP2lkPSR7aWR9YCkuZGF0YTtcclxuICAgIC8vIH0sXHJcbiAgICBhc3luYyBnZXRQbGF5ZXJzQnlUZWFtSWQoaWQpe1xyXG4gICAgICAgIHJldHVybiAoYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy50aGVzcG9ydHNkYi5jb20vYXBpL3YxL2pzb24vJHthcGlLZXl9L2xvb2t1cF9hbGxfcGxheWVycy5waHA/aWQ9JHtpZH1gKSkuZGF0YTtcclxuICAgIH0sXHJcbiAgICBhc3luYyBnZXRVc2Vyc0xvdmVkKHVzZXIpe1xyXG4gICAgICAgIHVzZXIgPSBtYWtlVXJsKHVzZXIpXHJcbiAgICAgICAgcmV0dXJuIChhd2FpdCBheGlvcy5nZXQoYGh0dHBzOi8vd3d3LnRoZXNwb3J0c2RiLmNvbS9hcGkvdjEvanNvbi8ke2FwaUtleX0vc2VhcmNobG92ZXMucGhwP3U9JHt1c2VyfWApKS5kYXRhO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIGdldExlYWd1ZURldGFpbHNCeUlkKGlkKXtcclxuICAgICAgICByZXR1cm4gKGF3YWl0IGF4aW9zLmdldChgaHR0cHM6Ly93d3cudGhlc3BvcnRzZGIuY29tL2FwaS92MS9qc29uLyR7YXBpS2V5fS9sb29rdXBsZWFndWUucGhwP2lkPSR7aWR9YCkpLmRhdGE7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgZ2V0VGVhbURldGFpbHNCeUlkKGlkKXtcclxuICAgICAgICByZXR1cm4gKGF3YWl0IGF4aW9zLmdldChgaHR0cHM6Ly93d3cudGhlc3BvcnRzZGIuY29tL2FwaS92MS9qc29uLyR7YXBpS2V5fS9sb29rdXB0ZWFtLnBocD9pZD0ke2lkfWApKS5kYXRhO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIGdldFBsYXllckRldGFpbHNCeUlkKGlkKXtcclxuICAgICAgICByZXR1cm4gKGF3YWl0IGF4aW9zLmdldChgaHR0cHM6Ly93d3cudGhlc3BvcnRzZGIuY29tL2FwaS92MS9qc29uLyR7YXBpS2V5fS9sb29rdXBwbGF5ZXIucGhwP2lkPSR7aWR9YCkpLmRhdGE7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgZ2V0RXZlbnREZXRhaWxzQnlJZChpZCl7XHJcbiAgICAgICAgcmV0dXJuIChhd2FpdCBheGlvcy5nZXQoYGh0dHBzOi8vd3d3LnRoZXNwb3J0c2RiLmNvbS9hcGkvdjEvanNvbi8ke2FwaUtleX0vbG9va3VwZXZlbnQucGhwP2lkPSR7aWR9YCkpLmRhdGE7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgZ2V0UGxheWVySG9ub3Vyc0J5SWQoaWQpe1xyXG4gICAgICAgIHJldHVybiAoYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy50aGVzcG9ydHNkYi5jb20vYXBpL3YxL2pzb24vJHthcGlLZXl9L2xvb2t1cGhvbm9ycy5waHA/aWQ9JHtpZH1gKSkuZGF0YTtcclxuICAgIH0sXHJcbiAgICBhc3luYyBnZXRQbGF5ZXJGb3JtZXJUZWFtc0J5SWQoaWQpe1xyXG4gICAgICAgIHJldHVybiAoYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy50aGVzcG9ydHNkYi5jb20vYXBpL3YxL2pzb24vJHthcGlLZXl9L2xvb2t1cGZvcm1lcnRlYW1zLnBocD9pZD0ke2lkfWApKS5kYXRhO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIGdldFBsYXllckNvbnRyYWN0c0J5SWQoaWQpe1xyXG4gICAgICAgIHJldHVybiAoYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy50aGVzcG9ydHNkYi5jb20vYXBpL3YxL2pzb24vJHthcGlLZXl9L2xvb2t1cGNvbnRyYWN0cy5waHA/aWQ9JHtpZH1gKSkuZGF0YTtcclxuICAgIH0sXHJcbiAgICBhc3luYyBnZXRFdmVudFJlc3VsdHNCeUlkKGlkKXtcclxuICAgICAgICByZXR1cm4gKGF3YWl0IGF4aW9zLmdldChgaHR0cHM6Ly93d3cudGhlc3BvcnRzZGIuY29tL2FwaS92MS9qc29uLyR7YXBpS2V5fS9ldmVudHJlc3VsdHMucGhwP2lkPSR7aWR9YCkpLmRhdGE7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgZ2V0VHZFdmVudEJ5SWQoaWQpe1xyXG4gICAgICAgIHJldHVybiAoYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy50aGVzcG9ydHNkYi5jb20vYXBpL3YxL2pzb24vJHthcGlLZXl9L2xvb2t1cHR2LnBocD9pZD0ke2lkfWApKS5kYXRhO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIGdldExvb2t1cFRhYmxlQnlMZWFndWVJZEFuZFNlYXNvbihpZCwgc2Vhc29uKXtcclxuICAgICAgICByZXR1cm4gKGF3YWl0IGF4aW9zLmdldChgaHR0cHM6Ly93d3cudGhlc3BvcnRzZGIuY29tL2FwaS92MS9qc29uLyR7YXBpS2V5fS9sb29rdXB0YWJsZS5waHA/bD0ke2lkfSZzPSR7c2Vhc29ufWApKS5kYXRhO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIGdldE5leHQ1RXZlbnRzQnlUZWFtSWQoaWQpe1xyXG4gICAgICAgIHJldHVybiAoYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy50aGVzcG9ydHNkYi5jb20vYXBpL3YxL2pzb24vJHthcGlLZXl9L2V2ZW50c25leHQucGhwP2lkPSR7aWR9YCkpLmRhdGE7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgZ2V0TmV4dDE1RXZlbnRzQnlMZWFndWVJZChpZCl7XHJcbiAgICAgICAgcmV0dXJuIChhd2FpdCBheGlvcy5nZXQoYGh0dHBzOi8vd3d3LnRoZXNwb3J0c2RiLmNvbS9hcGkvdjEvanNvbi8ke2FwaUtleX0vZXZlbnRzbmV4dC5waHA/aWQ9JHtpZH1gKSkuZGF0YTtcclxuICAgIH0sXHJcbiAgICBhc3luYyBnZXRQYXN0NUV2ZW50c0J5VGVhbUlkKGlkKXtcclxuICAgICAgICByZXR1cm4gKGF3YWl0IGF4aW9zLmdldChgaHR0cHM6Ly93d3cudGhlc3BvcnRzZGIuY29tL2FwaS92MS9qc29uLyR7YXBpS2V5fS9ldmVudHNsYXN0LnBocD9pZD0ke2lkfWApKS5kYXRhO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIGdldFBhc3QxNUV2ZW50c0J5TGVhZ3VlSWQoaWQpe1xyXG4gICAgICAgIHJldHVybiAoYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy50aGVzcG9ydHNkYi5jb20vYXBpL3YxL2pzb24vJHthcGlLZXl9L2V2ZW50c3Bhc3RsZWFndWUucGhwP2lkPSR7aWR9YCkpLmRhdGE7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgZ2V0RXZlbnRzSW5Sb3VuZChpZCwgcm91bmQsIHNlYXNvbil7XHJcbiAgICAgICAgcmV0dXJuIChhd2FpdCBheGlvcy5nZXQoYGh0dHBzOi8vd3d3LnRoZXNwb3J0c2RiLmNvbS9hcGkvdjEvanNvbi8ke2FwaUtleX0vZXZlbnRzcm91bmQucGhwP2lkPSR7aWR9JnI9JHtyb3VuZH0mcz0ke3NlYXNvbn1gKSkuZGF0YTtcclxuICAgIH0sXHJcbiAgICBhc3luYyBnZXRFdmVudHNPbkRheShkYXksIHNwb3J0LCBuYW1lKXtcclxuICAgICAgICBzcG9ydCA9IG1ha2VVcmwoc3BvcnQpXHJcbiAgICAgICAgbmFtZSA9IG1ha2VVcmwobmFtZSlcclxuICAgICAgICB2YXIgcGFyYW1zID0gW11cclxuICAgICAgICBpZihkYXkpIHBhcmFtcy5wdXNoKGBkPSR7ZGF5fWApXHJcbiAgICAgICAgaWYobmFtZSkgcGFyYW1zLnB1c2goYGw9JHtuYW1lfWApXHJcbiAgICAgICAgaWYoc3BvcnQpIHBhcmFtcy5wdXNoKGBzPSR7c3BvcnR9YClcclxuICAgICAgICByZXR1cm4gKGF3YWl0IGF4aW9zLmdldChgaHR0cHM6Ly93d3cudGhlc3BvcnRzZGIuY29tL2FwaS92MS9qc29uLyR7YXBpS2V5fS9ldmVudHNkYXkucGhwPyR7cGFyYW1zLmpvaW4oJyYnKX1gKSkuZGF0YTtcclxuICAgIH0sXHJcbiAgICBhc3luYyBnZXRUdkV2ZW50c09uRGF5KGRheSwgc3BvcnQsIGNvdW50cnkpe1xyXG4gICAgICAgIHNwb3J0ID0gbWFrZVVybChzcG9ydClcclxuICAgICAgICBjb3VudHJ5ID0gbWFrZVVybChjb3VudHJ5KVxyXG4gICAgICAgIHZhciBwYXJhbXMgPSBbXVxyXG4gICAgICAgIGlmKGRheSkgcGFyYW1zLnB1c2goYGQ9JHtkYXl9YClcclxuICAgICAgICBpZihjb3VudHJ5KSBwYXJhbXMucHVzaChgYT0ke2xlYWd1ZX1gKVxyXG4gICAgICAgIGlmKHNwb3J0KSBwYXJhbXMucHVzaChgcz0ke3Nwb3J0fWApXHJcbiAgICAgICAgcmV0dXJuIChhd2FpdCBheGlvcy5nZXQoYGh0dHBzOi8vd3d3LnRoZXNwb3J0c2RiLmNvbS9hcGkvdjEvanNvbi8ke2FwaUtleX0vZXZlbnRzdHYucGhwPyR7cGFyYW1zLmpvaW4oJyYnKX1gKSkuZGF0YTtcclxuICAgIH0sXHJcbiAgICBhc3luYyBnZXRUdkV2ZW50c0J5Q2hhbm5lbChjaGFubmVsKXtcclxuICAgICAgICBjaGFubmVsID0gbWFrZVVybChjaGFubmVsKVxyXG4gICAgICAgIHJldHVybiAoYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy50aGVzcG9ydHNkYi5jb20vYXBpL3YxL2pzb24vJHthcGlLZXl9L2V2ZW50c3R2LnBocD9jPSR7Y2hhbm5lbH1gKSkuZGF0YTtcclxuICAgIH0sXHJcbiAgICBhc3luYyBnZXRFdmVudHNCeUxlYWd1ZUlkQW5kU2Vhc29uKGlkLCBzZWFzb24pe1xyXG4gICAgICAgIHJldHVybiAoYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy50aGVzcG9ydHNkYi5jb20vYXBpL3YxL2pzb24vJHthcGlLZXl9L2V2ZW50c3NlYXNvbi5waHA/aWQ9JHtpZH0mcz0ke3NlYXNvbn1gKSkuZGF0YTtcclxuICAgIH0sXHJcbiAgICBhc3luYyBnZXRJbWFnZShpZCl7XHJcbiAgICAgICAgcmV0dXJuIChhd2FpdCBheGlvcy5nZXQoYGh0dHBzOi8vd3d3LnRoZXNwb3J0c2RiLmNvbS9pbWFnZXMvbWVkaWEvbGVhZ3VlL2ZhbmFydC8ke2lkfS5qcGdgKSkuZGF0YTtcclxuICAgIH0sXHJcbiAgICBhc3luYyBnZXRQcmV2aWV3SW1hZ2UoaWQpe1xyXG4gICAgICAgIHJldHVybiAoYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy50aGVzcG9ydHNkYi5jb20vaW1hZ2VzL21lZGlhL2xlYWd1ZS9mYW5hcnQvJHtpZH0uanBnL3ByZXZpZXdgKSkuZGF0YTtcclxuICAgIH0sXHJcbiAgICBhc3luYyBnZXRZb3V0dWJlRXZlbnRIaWdobGlndHMoZGF5LCBsZWFndWUsIHNwb3J0KXtcclxuICAgICAgICBsZWFndWUgPSBtYWtlVXJsKGxlYWd1ZSlcclxuICAgICAgICBzcG9ydCA9IG1ha2VVcmwoc3BvcnQpXHJcbiAgICAgICAgdmFyIHggPSBbXVxyXG4gICAgICAgIGlmKGRheSkgeC5wdXNoKGBkPSR7ZGF5fWApXHJcbiAgICAgICAgaWYobGVhZ3VlKSB4LnB1c2goYGw9JHtsZWFndWV9YClcclxuICAgICAgICBpZihzcG9ydCkgeC5wdXNoKGBzPSR7c3BvcnR9YClcclxuICAgICAgICByZXR1cm4gKGF3YWl0IGF4aW9zLmdldChgaHR0cHM6Ly93d3cudGhlc3BvcnRzZGIuY29tL2FwaS92MS9qc29uLyR7YXBpS2V5fS9ldmVudHNoaWdobGlnaHRzLnBocD8ke3guam9pbihcIiZcIil9YCkpLmRhdGE7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgZ2V0QWxsRXZlbnRzQnlMZWFndWVJZEFuZFNlYXNvbihpZCwgc2Vhc29uKXtcclxuICAgICAgICByZXR1cm4gKGF3YWl0IGF4aW9zLmdldChgaHR0cHM6Ly93d3cudGhlc3BvcnRzZGIuY29tL2FwaS92MS9qc29uLyR7YXBpS2V5fS9ldmVudHNzZWFzb24ucGhwP2lkPSR7aWR9JnM9JHtzZWFzb259YCkpLmRhdGE7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgZ2V0U29jY2VyTGl2ZXNjb3Jlcygpe1xyXG4gICAgICAgIHJldHVybiAoYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy50aGVzcG9ydHNkYi5jb20vYXBpL3YxL2pzb24vJHthcGlLZXl9L2xhdGVzdHNvY2Nlci5waHBgKSkuZGF0YTtcclxuICAgIH0sXHJcbiAgICBhc3luYyBnZXRMaXZlc2NvcmVzQnlTcG9ydChzcG9ydCl7XHJcbiAgICAgICAgc3BvcnQgPSBtYWtlVXJsKHNwb3J0KVxyXG4gICAgICAgIHJldHVybiAoYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy50aGVzcG9ydHNkYi5jb20vYXBpL3YyL2pzb24vJHthcGlLZXl9L2xpdmVzY29yZS5waHA/cz0ke3Nwb3J0fWApKS5kYXRhO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIGdldEdvbGZMaXZlc2NvcmVzKCl7XHJcbiAgICAgICAgcmV0dXJuIChhd2FpdCBheGlvcy5nZXQoYGh0dHBzOi8vd3d3LnRoZXNwb3J0c2RiLmNvbS9hcGkvdjEvanNvbi8ke2FwaUtleX0vbGF0ZXN0Z29sZi5waHBgKSkuZGF0YTtcclxuICAgIH0sXHJcbiAgICBhc3luYyBnZXRCYXNrZXRiYWxsTGl2ZXNjb3Jlcygpe1xyXG4gICAgICAgIHJldHVybiAoYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy50aGVzcG9ydHNkYi5jb20vYXBpL3YxL2pzb24vJHthcGlLZXl9L2xhdGVzdGJhc2tldGJhbGwucGhwYCkpLmRhdGE7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgZ2V0QW1lcmljYW5Gb290YmFsbExpdmVzY29yZXMoKXtcclxuICAgICAgICByZXR1cm4gKGF3YWl0IGF4aW9zLmdldChgaHR0cHM6Ly93d3cudGhlc3BvcnRzZGIuY29tL2FwaS92MS9qc29uLyR7YXBpS2V5fS9sYXRlc3RhbWVyaWNhbmZvb3RiYWxsLnBocGApKS5kYXRhO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBtYWtlVXJsKHgpe1xyXG4gICAgaWYoIXgpIHJldHVybiB4O1xyXG4gICAgcmV0dXJuIHguc3BsaXQoXCIgXCIpLmpvaW4oXCJfXCIpO1xyXG59IiwiaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgJy4uL3B1YmxpYy9zdGF0aWMvY3NzL3N0eWxlLnNjc3MnXG5pbXBvcnQgeyBJdGVhbSwgZ2V0TGVhZ3Vlc05hbWVzLCBnZXRUZWFtc0luTGVhZ3VlIH0gZnJvbSBcIi4vc2VydmljZXMvbGVhZ3Vlc1wiXG5cbmNvbnN0IGNyZWF0ZVRhYnM6IGFueSA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBsZWFndWVOYW1lcyA9IGF3YWl0IGdldExlYWd1ZXNOYW1lcygpXG4gICAgY29uc3QgdGFicyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgXG4gICAgY29uc3QgdGFiTGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJykgXG4gICAgdGFiTGlzdC5jbGFzc0xpc3QuYWRkKCd0YWJzJylcbiAgICBcbiAgICBsZWFndWVOYW1lcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICBjb25zdCBsaXN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJylcbiAgICAgICAgY29uc3QgYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcbiAgICAgICAgYnRuLnRhYkluZGV4ID0gbGVhZ3VlTmFtZXMuaW5kZXhPZihlbGVtZW50KVxuICAgICAgICBidG4uaWQgPSBlbGVtZW50XG4gICAgICAgIGJ0bi50ZXh0Q29udGVudCA9IGVsZW1lbnRcbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlVGFiKVxuICAgICAgICBsaXN0SXRlbS5hcHBlbmRDaGlsZChidG4pXG4gICAgICAgIHRhYkxpc3QuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pICBcbiAgICB9KTtcblxuICAgIHRhYnMuYXBwZW5kQ2hpbGQodGFiTGlzdClcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRhYnMpXG59XG5cbmNvbnN0IHRvZ2dsZVRhYiA9IGFzeW5jIChldmVudDogTW91c2VFdmVudCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0ZWFtcy1jb250YWluZXInKVswXSlcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0ZWFtcy1jb250YWluZXInKVswXSlcbiAgICBjb25zdCB0YXJnZXQgPSAoZXZlbnQudGFyZ2V0IGFzIEhUTUxCdXR0b25FbGVtZW50KVxuICAgIGxldCB0ZWFtc05hbWVzOiBBcnJheTxJdGVhbT4gPSBhd2FpdCBnZXRUZWFtc0luTGVhZ3VlKHRhcmdldC5pbm5lclRleHQpXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBkaXYuY2xhc3NMaXN0LmFkZCgndGVhbXMtY29udGFpbmVyJylcblxuICAgIHRlYW1zTmFtZXMuZm9yRWFjaCh0ZWFtID0+IHtcbiAgICAgICAgY29uc3QgdGVhbUVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJylcbiAgICAgICAgaWYgKHRlYW0ubG9nbykge1xuICAgICAgICAgICAgY29uc3QgbG9nbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpXG4gICAgICAgICAgICBsb2dvLmNsYXNzTGlzdC5hZGQoJ2xvZ28tY29udGFpbmVyJylcbiAgICAgICAgICAgIGxvZ28uc3JjID0gdGVhbS5sb2dvXG4gICAgICAgICAgICB0ZWFtRWxlbS5hcHBlbmRDaGlsZChsb2dvKVxuICAgICAgICB9XG4gICAgICAgIHRlYW1FbGVtLmlubmVySFRNTCArPSB0ZWFtLm5hbWVcbiAgICAgICAgZGl2LmFwcGVuZENoaWxkKHRlYW1FbGVtKVxuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXYpXG4gICAgXG4gICAgY29uc29sZS5sb2codGVhbXNOYW1lcylcbn1cblxuXG5jcmVhdGVUYWJzKClcbiIsImNvbnN0IHRoZVNwb3J0c0RCID0gcmVxdWlyZSgndGhlc3BvcnRzZGInKTtcblxuZXhwb3J0IGludGVyZmFjZSBJdGVhbSB7XG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGxvZ286IHN0cmluZyAgICBcbn1cblxuZXhwb3J0IGNvbnN0IGdldExlYWd1ZXNOYW1lcyA9IGFzeW5jICgpOiBQcm9taXNlPEFycmF5PHN0cmluZz4+ID0+IHtcbiAgICBsZXQgbGVhZ3VlTmFtZXM6IEFycmF5PHN0cmluZz4gPSBbXVxuICAgIHRoZVNwb3J0c0RCLnNldEFwaUtleSgyKVxuICAgIGNvbnN0IGxlYWd1ZXMgPSBhd2FpdCB0aGVTcG9ydHNEQi5nZXRMZWFndWVMaXN0QnlDb3VudHJ5KFwiQnJhemlsXCIsIFwiU29jY2VyXCIpXG4gICAgbGVhZ3Vlcy5jb3VudHJpZXMuZm9yRWFjaCgoZWxlbWVudDogeyBzdHJMZWFndWU6IHN0cmluZzsgfSkgPT4ge1xuICAgICAgICBsZWFndWVOYW1lcy5wdXNoKGVsZW1lbnQuc3RyTGVhZ3VlKVxuICAgIH0pO1xuICAgIHJldHVybiBsZWFndWVOYW1lc1xufVxuXG5leHBvcnQgY29uc3QgZ2V0VGVhbXNJbkxlYWd1ZSA9IGFzeW5jIChsZWFndWVOYW1lOiBzdHJpbmcpIDogUHJvbWlzZTxBcnJheTxJdGVhbT4+ID0+IHtcbiAgICBsZXQgdGVhbXNOYW1lczogQXJyYXk8SXRlYW0+ID0gW11cbiAgICB0aGVTcG9ydHNEQi5zZXRBcGlLZXkoMilcbiAgICBjb25zdCB0ZWFtcyA9IGF3YWl0IHRoZVNwb3J0c0RCLmdldFRlYW1zQnlMZWFndWVOYW1lKGxlYWd1ZU5hbWUpXG4gICAgdGVhbXMudGVhbXMuZm9yRWFjaCgoZWxlbWVudDogeyBzdHJUZWFtOiBzdHJpbmc7IHN0clRlYW1Mb2dvOiBzdHJpbmc7IH0pID0+IHtcbiAgICAgICAgbGV0IHRlbXBUZWFtOiBJdGVhbSA9IHt9IGFzIEl0ZWFtXG4gICAgICAgIHRlbXBUZWFtLm5hbWUgPSBlbGVtZW50LnN0clRlYW1cbiAgICAgICAgdGVtcFRlYW0ubG9nbyA9IGVsZW1lbnQuc3RyVGVhbUxvZ29cbiAgICAgICAgdGVhbXNOYW1lcy5wdXNoKHRlbXBUZWFtKVxuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiB0ZWFtc05hbWVzXG59XG5cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MDcpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ1dGlscyIsInNldHRsZSIsImJ1aWxkVVJMIiwiYnVpbGRGdWxsUGF0aCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwiY29uZmlnIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXF1ZXN0RGF0YSIsImRhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImhlYWRlcnMiLCJpc0Zvcm1EYXRhIiwicmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsImZ1bGxQYXRoIiwiYmFzZVVSTCIsInVybCIsIm9wZW4iLCJtZXRob2QiLCJ0b1VwcGVyQ2FzZSIsInBhcmFtcyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJ0aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInJlc3BvbnNlVVJMIiwiaW5kZXhPZiIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9uYWJvcnQiLCJvbmVycm9yIiwib250aW1lb3V0IiwidGltZW91dEVycm9yTWVzc2FnZSIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwiY29va2llcyIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInhzcmZDb29raWVOYW1lIiwicmVhZCIsInVuZGVmaW5lZCIsInhzcmZIZWFkZXJOYW1lIiwiZm9yRWFjaCIsInZhbCIsImtleSIsInRvTG93ZXJDYXNlIiwic2V0UmVxdWVzdEhlYWRlciIsImlzVW5kZWZpbmVkIiwiZSIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJwcm9taXNlIiwidGhlbiIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsImJpbmQiLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiY29udGV4dCIsImluc3RhbmNlIiwicHJvdG90eXBlIiwiZXh0ZW5kIiwiYXhpb3MiLCJjcmVhdGUiLCJpbnN0YW5jZUNvbmZpZyIsImRlZmF1bHRzIiwiQ2FuY2VsIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwibWVzc2FnZSIsInRoaXMiLCJ0b1N0cmluZyIsIl9fQ0FOQ0VMX18iLCJleGVjdXRvciIsIlR5cGVFcnJvciIsInJlc29sdmVQcm9taXNlIiwidG9rZW4iLCJyZWFzb24iLCJ0aHJvd0lmUmVxdWVzdGVkIiwic291cmNlIiwiYyIsInZhbHVlIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaW50ZXJjZXB0b3JzIiwiYXJndW1lbnRzIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsInVuc2hpZnQiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInB1c2giLCJsZW5ndGgiLCJzaGlmdCIsImdldFVyaSIsInJlcGxhY2UiLCJtZXJnZSIsImhhbmRsZXJzIiwidXNlIiwiZWplY3QiLCJpZCIsImZuIiwiaCIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInJlcXVlc3RlZFVSTCIsImVuaGFuY2VFcnJvciIsImNvZGUiLCJlcnJvciIsIkVycm9yIiwidHJhbnNmb3JtRGF0YSIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiY29tbW9uIiwiYWRhcHRlciIsInRyYW5zZm9ybVJlc3BvbnNlIiwiaXNBeGlvc0Vycm9yIiwidG9KU09OIiwibmFtZSIsImRlc2NyaXB0aW9uIiwibnVtYmVyIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwic3RhY2siLCJjb25maWcxIiwiY29uZmlnMiIsInZhbHVlRnJvbUNvbmZpZzJLZXlzIiwibWVyZ2VEZWVwUHJvcGVydGllc0tleXMiLCJkZWZhdWx0VG9Db25maWcyS2V5cyIsInByb3AiLCJpc09iamVjdCIsImRlZXBNZXJnZSIsImF4aW9zS2V5cyIsImNvbmNhdCIsIm90aGVyS2V5cyIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJ2YWxpZGF0ZVN0YXR1cyIsImZucyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsInByb2Nlc3MiLCJjYWxsIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiaXNTdHJlYW0iLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0FycmF5QnVmZmVyVmlldyIsImJ1ZmZlciIsImlzVVJMU2VhcmNoUGFyYW1zIiwiSlNPTiIsInN0cmluZ2lmeSIsInBhcnNlIiwibWF4Q29udGVudExlbmd0aCIsInRoaXNBcmciLCJhcmdzIiwiQXJyYXkiLCJpIiwiYXBwbHkiLCJlbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemVkUGFyYW1zIiwicGFydHMiLCJpc0FycmF5IiwidiIsImlzRGF0ZSIsInRvSVNPU3RyaW5nIiwiam9pbiIsImhhc2htYXJrSW5kZXgiLCJzbGljZSIsInJlbGF0aXZlVVJMIiwid3JpdGUiLCJleHBpcmVzIiwicGF0aCIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsImlzTnVtYmVyIiwiRGF0ZSIsInRvR01UU3RyaW5nIiwiaXNTdHJpbmciLCJkb2N1bWVudCIsIm1hdGNoIiwiUmVnRXhwIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlIiwibm93IiwidGVzdCIsIm9yaWdpblVSTCIsIm1zaWUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsImNyZWF0ZUVsZW1lbnQiLCJyZXNvbHZlVVJMIiwiaHJlZiIsInNldEF0dHJpYnV0ZSIsInByb3RvY29sIiwiaG9zdCIsInNlYXJjaCIsImhhc2giLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsImNoYXJBdCIsIndpbmRvdyIsImxvY2F0aW9uIiwicmVxdWVzdFVSTCIsInBhcnNlZCIsIm5vcm1hbGl6ZWROYW1lIiwiaWdub3JlRHVwbGljYXRlT2YiLCJzcGxpdCIsImxpbmUiLCJ0cmltIiwic3Vic3RyIiwiY2FsbGJhY2siLCJhcnIiLCJpc0Z1bmN0aW9uIiwib2JqIiwibCIsImhhc093blByb3BlcnR5IiwiY29uc3RydWN0b3IiLCJGb3JtRGF0YSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwicGlwZSIsIlVSTFNlYXJjaFBhcmFtcyIsInByb2R1Y3QiLCJyZXN1bHQiLCJhc3NpZ25WYWx1ZSIsImEiLCJiIiwic3RyIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290Iiwib3B0aW9ucyIsInN0eWxlVGFnVHJhbnNmb3JtIiwic2V0QXR0cmlidXRlcyIsImluc2VydCIsImRvbUFQSSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImdldFRhcmdldCIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiYXBpS2V5IiwibWFrZVVybCIsIngiLCJzZXRBcGlLZXkiLCJhc3luYyIsImdldCIsInRlYW0iLCJzZWFzb24iLCJjb3VudHJ5Iiwic3BvcnQiLCJ1c2VyIiwicm91bmQiLCJkYXkiLCJsZWFndWUiLCJjaGFubmVsIiwidG9nZ2xlVGFiIiwiZXZlbnQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiYm9keSIsImdldFRlYW1zSW5MZWFndWUiLCJpbm5lclRleHQiLCJ0ZWFtc05hbWVzIiwiZGl2IiwiY2xhc3NMaXN0IiwiYWRkIiwidGVhbUVsZW0iLCJsb2dvIiwic3JjIiwiaW5uZXJIVE1MIiwiY29uc29sZSIsImxvZyIsImdldExlYWd1ZXNOYW1lcyIsImxlYWd1ZU5hbWVzIiwidGFicyIsInRhYkxpc3QiLCJsaXN0SXRlbSIsImJ0biIsInRhYkluZGV4IiwidGV4dENvbnRlbnQiLCJ0aGVTcG9ydHNEQiIsImdldExlYWd1ZUxpc3RCeUNvdW50cnkiLCJjb3VudHJpZXMiLCJzdHJMZWFndWUiLCJsZWFndWVOYW1lIiwiZ2V0VGVhbXNCeUxlYWd1ZU5hbWUiLCJ0ZWFtcyIsInRlbXBUZWFtIiwic3RyVGVhbSIsInN0clRlYW1Mb2dvIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImRlZmluaXRpb24iLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwibmMiXSwic291cmNlUm9vdCI6IiJ9