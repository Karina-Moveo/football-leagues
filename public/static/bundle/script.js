(()=>{var e={669:(e,t,n)=>{e.exports=n(609)},448:(e,t,n)=>{"use strict";var r=n(867),a=n(26),o=n(327),s=n(97),i=n(109),c=n(985),u=n(61);e.exports=function(e){return new Promise((function(t,p){var l=e.data,d=e.headers;r.isFormData(l)&&delete d["Content-Type"];var f=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",m=e.auth.password||"";d.Authorization="Basic "+btoa(h+":"+m)}var g=s(e.baseURL,e.url);if(f.open(e.method.toUpperCase(),o(g,e.params,e.paramsSerializer),!0),f.timeout=e.timeout,f.onreadystatechange=function(){if(f&&4===f.readyState&&(0!==f.status||f.responseURL&&0===f.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in f?i(f.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?f.response:f.responseText,status:f.status,statusText:f.statusText,headers:n,config:e,request:f};a(t,p,r),f=null}},f.onabort=function(){f&&(p(u("Request aborted",e,"ECONNABORTED",f)),f=null)},f.onerror=function(){p(u("Network Error",e,null,f)),f=null},f.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),p(u(t,e,"ECONNABORTED",f)),f=null},r.isStandardBrowserEnv()){var v=n(372),w=(e.withCredentials||c(g))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;w&&(d[e.xsrfHeaderName]=w)}if("setRequestHeader"in f&&r.forEach(d,(function(e,t){void 0===l&&"content-type"===t.toLowerCase()?delete d[t]:f.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(f.withCredentials=!!e.withCredentials),e.responseType)try{f.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&f.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&f.upload&&f.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){f&&(f.abort(),p(e),f=null)})),void 0===l&&(l=null),f.send(l)}))}},609:(e,t,n)=>{"use strict";var r=n(867),a=n(849),o=n(321),s=n(185);function i(e){var t=new o(e),n=a(o.prototype.request,t);return r.extend(n,o.prototype,t),r.extend(n,t),n}var c=i(n(655));c.Axios=o,c.create=function(e){return i(s(c.defaults,e))},c.Cancel=n(263),c.CancelToken=n(972),c.isCancel=n(502),c.all=function(e){return Promise.all(e)},c.spread=n(713),e.exports=c,e.exports.default=c},263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},972:(e,t,n)=>{"use strict";var r=n(263);function a(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}a.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},a.source=function(){var e;return{token:new a((function(t){e=t})),cancel:e}},e.exports=a},502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(867),a=n(327),o=n(782),s=n(572),i=n(185);function c(e){this.defaults=e,this.interceptors={request:new o,response:new o}}c.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=i(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[s,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},c.prototype.getUri=function(e){return e=i(this.defaults,e),a(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){c.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){c.prototype[e]=function(t,n,a){return this.request(r.merge(a||{},{method:e,url:t,data:n}))}})),e.exports=c},782:(e,t,n)=>{"use strict";var r=n(867);function a(){this.handlers=[]}a.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},a.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},a.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=a},97:(e,t,n)=>{"use strict";var r=n(793),a=n(303);e.exports=function(e,t){return e&&!r(t)?a(e,t):t}},61:(e,t,n)=>{"use strict";var r=n(481);e.exports=function(e,t,n,a,o){var s=new Error(e);return r(s,t,n,a,o)}},572:(e,t,n)=>{"use strict";var r=n(867),a=n(527),o=n(502),s=n(655);function i(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return i(e),e.headers=e.headers||{},e.data=a(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||s.adapter)(e).then((function(t){return i(e),t.data=a(t.data,t.headers,e.transformResponse),t}),(function(t){return o(t)||(i(e),t&&t.response&&(t.response.data=a(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,n,r,a){return e.config=t,n&&(e.code=n),e.request=r,e.response=a,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},185:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t){t=t||{};var n={},a=["url","method","params","data"],o=["headers","auth","proxy"],s=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(a,(function(e){void 0!==t[e]&&(n[e]=t[e])})),r.forEach(o,(function(a){r.isObject(t[a])?n[a]=r.deepMerge(e[a],t[a]):void 0!==t[a]?n[a]=t[a]:r.isObject(e[a])?n[a]=r.deepMerge(e[a]):void 0!==e[a]&&(n[a]=e[a])})),r.forEach(s,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])}));var i=a.concat(o).concat(s),c=Object.keys(t).filter((function(e){return-1===i.indexOf(e)}));return r.forEach(c,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])})),n}},26:(e,t,n)=>{"use strict";var r=n(61);e.exports=function(e,t,n){var a=n.config.validateStatus;!a||a(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},527:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},655:(e,t,n)=>{"use strict";var r=n(867),a=n(16),o={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var i,c={adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(i=n(448)),i),transformRequest:[function(e,t){return a(t,"Accept"),a(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(s(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){c.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){c.headers[e]=r.merge(o)})),e.exports=c},849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},327:(e,t,n)=>{"use strict";var r=n(867);function a(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var o;if(n)o=n(t);else if(r.isURLSearchParams(t))o=t.toString();else{var s=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),s.push(a(t)+"="+a(e))})))})),o=s.join("&")}if(o){var i=e.indexOf("#");-1!==i&&(e=e.slice(0,i)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}},303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},372:(e,t,n)=>{"use strict";var r=n(867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,a,o,s){var i=[];i.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&i.push("expires="+new Date(n).toGMTString()),r.isString(a)&&i.push("path="+a),r.isString(o)&&i.push("domain="+o),!0===s&&i.push("secure"),document.cookie=i.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},985:(e,t,n)=>{"use strict";var r=n(867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function a(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=a(window.location.href),function(t){var n=r.isString(t)?a(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},16:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},109:(e,t,n)=>{"use strict";var r=n(867),a=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,o,s={};return e?(r.forEach(e.split("\n"),(function(e){if(o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t){if(s[t]&&a.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([n]):s[t]?s[t]+", "+n:n}})),s):s}},713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},867:(e,t,n)=>{"use strict";var r=n(849),a=Object.prototype.toString;function o(e){return"[object Array]"===a.call(e)}function s(e){return void 0===e}function i(e){return null!==e&&"object"==typeof e}function c(e){return"[object Function]"===a.call(e)}function u(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),o(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.call(null,e[a],a,e)}e.exports={isArray:o,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:function(e){return null!==e&&!s(e)&&null!==e.constructor&&!s(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:i,isUndefined:s,isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:c,isStream:function(e){return i(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:u,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,a=arguments.length;r<a;r++)u(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,a=arguments.length;r<a;r++)u(arguments[r],n);return t},extend:function(e,t,n){return u(t,(function(t,a){e[a]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},433:(e,t,n)=>{"use strict";n.d(t,{Z:()=>d});var r=n(537),a=n.n(r),o=n(645),s=n.n(o),i=n(667),c=n.n(i),u=new URL(n(837),n.b),p=s()(a()),l=c()(u);p.push([e.id,'*{box-sizing:border-box}body{font-family:"Gill Sans","Gill Sans MT",Calibri,"Trebuchet MS",sans-serif;font-size:1rem;text-align:center;background-image:url('+l+');background-repeat:no-repeat;background-attachment:fixed;background-size:cover}.tabs{display:flex;flex-direction:row;justify-content:space-around;align-items:center;background-color:rgba(255,255,255,.74);border-radius:10px;padding:5px 5px 5px 15px}.teams-container{display:flex;flex-direction:column;justify-content:flex-start;align-items:center;background-color:rgba(255,255,255,.74);border-radius:10px}.logo-container{width:100px}button{font-family:"Gill Sans","Gill Sans MT",Calibri,"Trebuchet MS",sans-serif;display:flex;margin:5px;width:fit-content;background-color:rgba(0,0,0,0);border:none;padding:5px 10px;cursor:pointer}button:focus{font-weight:600;border-bottom:2px solid rgba(74,74,74,.5098039216)}ul{list-style-type:none}',"",{version:3,sources:["webpack://./public/static/css/style.scss"],names:[],mappings:"AAAA,EACC,qBAAA,CAED,KACC,wEAAA,CACA,cAAA,CACA,iBAAA,CACA,wDAAA,CACA,2BAAA,CACA,2BAAA,CACA,qBAAA,CAED,MACC,YAAA,CACA,kBAAA,CACG,4BAAA,CACH,kBAAA,CACG,sCAAA,CACA,kBAAA,CACH,wBAAA,CAED,iBACC,YAAA,CACA,qBAAA,CACA,0BAAA,CACA,kBAAA,CACA,sCAAA,CACG,kBAAA,CAEJ,gBACC,WAAA,CAED,OACC,wEAAA,CACA,YAAA,CACA,UAAA,CACA,iBAAA,CACA,8BAAA,CACA,WAAA,CACA,gBAAA,CACA,cAAA,CACA,aACC,eAAA,CACG,kDAAA,CAGL,GACC,oBAAA",sourcesContent:["* {\n\tbox-sizing: border-box;\n}\nbody {\n\tfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n\tfont-size: 1rem;\n\ttext-align: center;\n\tbackground-image: url('../../assets/football.jpeg');\n\tbackground-repeat: no-repeat;\n\tbackground-attachment: fixed;  \n\tbackground-size: cover;\n}\n.tabs {\n\tdisplay: flex;\n\tflex-direction: row;\n    justify-content: space-around;\n\talign-items: center;\n    background-color: rgb(255 255 255 / 74%);\n    border-radius: 10px;\n\tpadding: 5px 5px 5px 15px;\n}\n.teams-container {\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: flex-start;\n\talign-items: center;\n\tbackground-color: rgb(255 255 255 / 74%);\n    border-radius: 10px;\n}\n.logo-container {\n\twidth: 100px;\n}\nbutton {\n\tfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n\tdisplay: flex;\n\tmargin: 5px;\n\twidth: fit-content;\n\tbackground-color: transparent;\n\tborder: none;\n\tpadding: 5px 10px;\n\tcursor: pointer;\n\t&:focus {\n\t\tfont-weight: 600;\n    \tborder-bottom: 2px solid #4a4a4a82;\n\t}\n}\nul {\n\tlist-style-type: none;\n}\n\n\n"],sourceRoot:""}]);const d=p},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var u=0;u<e.length;u++){var p=[].concat(e[u]);r&&s[p[0]]||(void 0!==o&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=o),n&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=n):p[2]=n),a&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=a):p[4]="".concat(a)),t.push(p))}},t}},667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),s=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(s).concat([o]).join("\n")}return[t].join("\n")}},24:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>v});var r=n(379),a=n.n(r),o=n(795),s=n.n(o),i=n(569),c=n.n(i),u=n(565),p=n.n(u),l=n(216),d=n.n(l),f=n(589),h=n.n(f),m=n(433),g={};g.styleTagTransform=h(),g.setAttributes=p(),g.insert=c().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=d(),a()(m.Z,g);const v=m.Z&&m.Z.locals?m.Z.locals:void 0},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},s=[],i=0;i<e.length;i++){var c=e[i],u=r.base?c[0]+r.base:c[0],p=o[u]||0,l="".concat(u," ").concat(p);o[u]=p+1;var d=n(l),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)t[d].references++,t[d].updater(f);else{var h=a(f,r);r.byIndex=i,t.splice(i,0,{identifier:l,updater:h,references:1})}s.push(l)}return s}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var s=0;s<o.length;s++){var i=n(o[s]);t[i].references--}for(var c=r(e,a),u=0;u<o.length;u++){var p=n(o[u]);0===t[p].references&&(t[p].updater(),t.splice(p,1))}o=c}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},281:(e,t,n)=>{const r=n(669);var a=1;function o(e){return e?e.split(" ").join("_"):e}e.exports={setApiKey(e){a=e},getTeamByName:async e=>(e=o(e),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchteams.php?t=${e}`)).data),getTeamByShortCode:async e=>(e=o(e),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchteams.php?sname=${e}`)).data),getAllPlayersByTeam:async e=>(e=o(e),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchplayers.php?t=${e}`)).data),async getPlayerByName(e,t){e=o(e),t=o(t);var n=[];return n.push(`p=${e}`),t&&n.push(`t=${t}`),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchplayers.php?${n.join("&")}`)).data},async getEventByName(e,t){e=o(e),t=o(t);var n=[];return n.push(`e=${e}`),t&&n.push(`s=${t}`),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchevents.php?${n.join("&")}`)).data},getSportsList:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/all_sports.php`)).data,getLeagueList:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/all_leagues.php`)).data,getCountryList:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/all_countries.php`)).data,async getLeagueListByCountry(e,t){e=o(e),t=o(t);var n=[];return n.push(`c=${e}`),t&&n.push(`s=${t}`),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/search_all_leagues.php?${n.join("&")}`)).data},getSeasonsInLeagueById:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/search_all_seasons.php?id=${e}`)).data,getTeamsByLeagueName:async e=>(e=o(e),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/search_all_teams.php?l=${e}`)).data),getTeamsByLeagueName:async e=>(e=o(e),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/search_all_teams.php?l=${e}`)).data),getTeamsByCountryAndSport:async(e,t)=>(t=o(t),e=o(e),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/search_all_teams.php?s=${e}&c=${t}`)).data),getPlayersByTeamId:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookup_all_players.php?id=${e}`)).data,getUsersLoved:async e=>(e=o(e),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchloves.php?u=${e}`)).data),getLeagueDetailsById:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupleague.php?id=${e}`)).data,getTeamDetailsById:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupteam.php?id=${e}`)).data,getPlayerDetailsById:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupplayer.php?id=${e}`)).data,getEventDetailsById:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupevent.php?id=${e}`)).data,getPlayerHonoursById:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookuphonors.php?id=${e}`)).data,getPlayerFormerTeamsById:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupformerteams.php?id=${e}`)).data,getPlayerContractsById:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupcontracts.php?id=${e}`)).data,getEventResultsById:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventresults.php?id=${e}`)).data,getTvEventById:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookuptv.php?id=${e}`)).data,getLookupTableByLeagueIdAndSeason:async(e,t)=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookuptable.php?l=${e}&s=${t}`)).data,getNext5EventsByTeamId:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsnext.php?id=${e}`)).data,getNext15EventsByLeagueId:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsnext.php?id=${e}`)).data,getPast5EventsByTeamId:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventslast.php?id=${e}`)).data,getPast15EventsByLeagueId:async e=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventspastleague.php?id=${e}`)).data,getEventsInRound:async(e,t,n)=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsround.php?id=${e}&r=${t}&s=${n}`)).data,async getEventsOnDay(e,t,n){t=o(t),n=o(n);var s=[];return e&&s.push(`d=${e}`),n&&s.push(`l=${n}`),t&&s.push(`s=${t}`),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsday.php?${s.join("&")}`)).data},async getTvEventsOnDay(e,t,n){t=o(t),n=o(n);var s=[];return e&&s.push(`d=${e}`),n&&s.push(`a=${league}`),t&&s.push(`s=${t}`),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventstv.php?${s.join("&")}`)).data},getTvEventsByChannel:async e=>(e=o(e),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventstv.php?c=${e}`)).data),getEventsByLeagueIdAndSeason:async(e,t)=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsseason.php?id=${e}&s=${t}`)).data,getImage:async e=>(await r.get(`https://www.thesportsdb.com/images/media/league/fanart/${e}.jpg`)).data,getPreviewImage:async e=>(await r.get(`https://www.thesportsdb.com/images/media/league/fanart/${e}.jpg/preview`)).data,async getYoutubeEventHighligts(e,t,n){t=o(t),n=o(n);var s=[];return e&&s.push(`d=${e}`),t&&s.push(`l=${t}`),n&&s.push(`s=${n}`),(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventshighlights.php?${s.join("&")}`)).data},getAllEventsByLeagueIdAndSeason:async(e,t)=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsseason.php?id=${e}&s=${t}`)).data,getSoccerLivescores:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/latestsoccer.php`)).data,getLivescoresBySport:async e=>(e=o(e),(await r.get(`https://www.thesportsdb.com/api/v2/json/${a}/livescore.php?s=${e}`)).data),getGolfLivescores:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/latestgolf.php`)).data,getBasketballLivescores:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/latestbasketball.php`)).data,getAmericanFootballLivescores:async()=>(await r.get(`https://www.thesportsdb.com/api/v1/json/${a}/latestamericanfootball.php`)).data}},607:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function i(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,i)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,o,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(o){return function(i){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((a=(a=s.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){s.label=o[1];break}if(6===o[0]&&s.label<a[1]){s.label=a[1],a=o;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(o);break}a[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,i])}}};Object.defineProperty(t,"__esModule",{value:!0}),n(24);var o=n(999),s=function(e){return r(void 0,void 0,void 0,(function(){var t,n,r;return a(this,(function(a){switch(a.label){case 0:return document.getElementsByClassName("teams-container")[0]&&document.body.removeChild(document.getElementsByClassName("teams-container")[0]),t=e.target,[4,(0,o.getTeamsInLeague)(t.innerText)];case 1:return n=a.sent(),(r=document.createElement("div")).classList.add("teams-container"),n.forEach((function(e){var t=document.createElement("p");if(e.logo){var n=document.createElement("img");n.classList.add("logo-container"),n.src=e.logo,t.appendChild(n)}t.innerHTML+=e.name,r.appendChild(t)})),document.body.appendChild(r),console.log(n),[2]}}))}))};r(void 0,void 0,void 0,(function(){var e,t,n;return a(this,(function(r){switch(r.label){case 0:return[4,(0,o.getLeaguesNames)()];case 1:return e=r.sent(),t=document.createElement("div"),(n=document.createElement("ul")).classList.add("tabs"),e.forEach((function(t){var r=document.createElement("li"),a=document.createElement("button");a.tabIndex=e.indexOf(t),a.id=t,a.textContent=t,a.addEventListener("click",s),r.appendChild(a),n.appendChild(r)})),t.appendChild(n),document.body.appendChild(t),[2]}}))}))},999:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),a(n(815),t)},815:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function i(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,i)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,o,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(o){return function(i){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((a=(a=s.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){s.label=o[1];break}if(6===o[0]&&s.label<a[1]){s.label=a[1],a=o;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(o);break}a[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,i])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.getTeamsInLeague=t.getLeaguesNames=void 0;var o=n(281);t.getLeaguesNames=function(){return r(void 0,void 0,void 0,(function(){var e;return a(this,(function(t){switch(t.label){case 0:return e=[],o.setApiKey(2),[4,o.getLeagueListByCountry("England","Soccer")];case 1:return t.sent().countries.slice(2,7).forEach((function(t){e.push(t.strLeague)})),[2,e]}}))}))},t.getTeamsInLeague=function(e){return r(void 0,void 0,void 0,(function(){var t;return a(this,(function(n){switch(n.label){case 0:return t=[],o.setApiKey(2),[4,o.getTeamsByLeagueName(e)];case 1:return n.sent().teams.forEach((function(e){var n={};n.name=e.strTeam,n.logo=e.strTeamLogo,t.push(n)})),[2,t]}}))}))}},837:(e,t,n)=>{"use strict";e.exports=n.p+"233b2126d4f8b38d0742.jpeg"}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,n(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,