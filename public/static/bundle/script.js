(()=>{var t={669:(t,e,r)=>{t.exports=r(609)},448:(t,e,r)=>{"use strict";var n=r(867),a=r(26),s=r(327),o=r(97),i=r(109),c=r(985),p=r(61);t.exports=function(t){return new Promise((function(e,u){var h=t.data,d=t.headers;n.isFormData(h)&&delete d["Content-Type"];var l=new XMLHttpRequest;if(t.auth){var f=t.auth.username||"",w=t.auth.password||"";d.Authorization="Basic "+btoa(f+":"+w)}var m=o(t.baseURL,t.url);if(l.open(t.method.toUpperCase(),s(m,t.params,t.paramsSerializer),!0),l.timeout=t.timeout,l.onreadystatechange=function(){if(l&&4===l.readyState&&(0!==l.status||l.responseURL&&0===l.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in l?i(l.getAllResponseHeaders()):null,n={data:t.responseType&&"text"!==t.responseType?l.response:l.responseText,status:l.status,statusText:l.statusText,headers:r,config:t,request:l};a(e,u,n),l=null}},l.onabort=function(){l&&(u(p("Request aborted",t,"ECONNABORTED",l)),l=null)},l.onerror=function(){u(p("Network Error",t,null,l)),l=null},l.ontimeout=function(){var e="timeout of "+t.timeout+"ms exceeded";t.timeoutErrorMessage&&(e=t.timeoutErrorMessage),u(p(e,t,"ECONNABORTED",l)),l=null},n.isStandardBrowserEnv()){var v=r(372),g=(t.withCredentials||c(m))&&t.xsrfCookieName?v.read(t.xsrfCookieName):void 0;g&&(d[t.xsrfHeaderName]=g)}if("setRequestHeader"in l&&n.forEach(d,(function(t,e){void 0===h&&"content-type"===e.toLowerCase()?delete d[e]:l.setRequestHeader(e,t)})),n.isUndefined(t.withCredentials)||(l.withCredentials=!!t.withCredentials),t.responseType)try{l.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&l.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&l.upload&&l.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then((function(t){l&&(l.abort(),u(t),l=null)})),void 0===h&&(h=null),l.send(h)}))}},609:(t,e,r)=>{"use strict";var n=r(867),a=r(849),s=r(321),o=r(185);function i(t){var e=new s(t),r=a(s.prototype.request,e);return n.extend(r,s.prototype,e),n.extend(r,e),r}var c=i(r(655));c.Axios=s,c.create=function(t){return i(o(c.defaults,t))},c.Cancel=r(263),c.CancelToken=r(972),c.isCancel=r(502),c.all=function(t){return Promise.all(t)},c.spread=r(713),t.exports=c,t.exports.default=c},263:t=>{"use strict";function e(t){this.message=t}e.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},e.prototype.__CANCEL__=!0,t.exports=e},972:(t,e,r)=>{"use strict";var n=r(263);function a(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise((function(t){e=t}));var r=this;t((function(t){r.reason||(r.reason=new n(t),e(r.reason))}))}a.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},a.source=function(){var t;return{token:new a((function(e){t=e})),cancel:t}},t.exports=a},502:t=>{"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},321:(t,e,r)=>{"use strict";var n=r(867),a=r(327),s=r(782),o=r(572),i=r(185);function c(t){this.defaults=t,this.interceptors={request:new s,response:new s}}c.prototype.request=function(t){"string"==typeof t?(t=arguments[1]||{}).url=arguments[0]:t=t||{},(t=i(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var e=[o,void 0],r=Promise.resolve(t);for(this.interceptors.request.forEach((function(t){e.unshift(t.fulfilled,t.rejected)})),this.interceptors.response.forEach((function(t){e.push(t.fulfilled,t.rejected)}));e.length;)r=r.then(e.shift(),e.shift());return r},c.prototype.getUri=function(t){return t=i(this.defaults,t),a(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},n.forEach(["delete","get","head","options"],(function(t){c.prototype[t]=function(e,r){return this.request(n.merge(r||{},{method:t,url:e}))}})),n.forEach(["post","put","patch"],(function(t){c.prototype[t]=function(e,r,a){return this.request(n.merge(a||{},{method:t,url:e,data:r}))}})),t.exports=c},782:(t,e,r)=>{"use strict";var n=r(867);function a(){this.handlers=[]}a.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},a.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},a.prototype.forEach=function(t){n.forEach(this.handlers,(function(e){null!==e&&t(e)}))},t.exports=a},97:(t,e,r)=>{"use strict";var n=r(793),a=r(303);t.exports=function(t,e){return t&&!n(e)?a(t,e):e}},61:(t,e,r)=>{"use strict";var n=r(481);t.exports=function(t,e,r,a,s){var o=new Error(t);return n(o,e,r,a,s)}},572:(t,e,r)=>{"use strict";var n=r(867),a=r(527),s=r(502),o=r(655);function i(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return i(t),t.headers=t.headers||{},t.data=a(t.data,t.headers,t.transformRequest),t.headers=n.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),n.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete t.headers[e]})),(t.adapter||o.adapter)(t).then((function(e){return i(t),e.data=a(e.data,e.headers,t.transformResponse),e}),(function(e){return s(e)||(i(t),e&&e.response&&(e.response.data=a(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)}))}},481:t=>{"use strict";t.exports=function(t,e,r,n,a){return t.config=e,r&&(t.code=r),t.request=n,t.response=a,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},185:(t,e,r)=>{"use strict";var n=r(867);t.exports=function(t,e){e=e||{};var r={},a=["url","method","params","data"],s=["headers","auth","proxy"],o=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];n.forEach(a,(function(t){void 0!==e[t]&&(r[t]=e[t])})),n.forEach(s,(function(a){n.isObject(e[a])?r[a]=n.deepMerge(t[a],e[a]):void 0!==e[a]?r[a]=e[a]:n.isObject(t[a])?r[a]=n.deepMerge(t[a]):void 0!==t[a]&&(r[a]=t[a])})),n.forEach(o,(function(n){void 0!==e[n]?r[n]=e[n]:void 0!==t[n]&&(r[n]=t[n])}));var i=a.concat(s).concat(o),c=Object.keys(e).filter((function(t){return-1===i.indexOf(t)}));return n.forEach(c,(function(n){void 0!==e[n]?r[n]=e[n]:void 0!==t[n]&&(r[n]=t[n])})),r}},26:(t,e,r)=>{"use strict";var n=r(61);t.exports=function(t,e,r){var a=r.config.validateStatus;!a||a(r.status)?t(r):e(n("Request failed with status code "+r.status,r.config,null,r.request,r))}},527:(t,e,r)=>{"use strict";var n=r(867);t.exports=function(t,e,r){return n.forEach(r,(function(r){t=r(t,e)})),t}},655:(t,e,r)=>{"use strict";var n=r(867),a=r(16),s={"Content-Type":"application/x-www-form-urlencoded"};function o(t,e){!n.isUndefined(t)&&n.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var i,c={adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(i=r(448)),i),transformRequest:[function(t,e){return a(e,"Accept"),a(e,"Content-Type"),n.isFormData(t)||n.isArrayBuffer(t)||n.isBuffer(t)||n.isStream(t)||n.isFile(t)||n.isBlob(t)?t:n.isArrayBufferView(t)?t.buffer:n.isURLSearchParams(t)?(o(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):n.isObject(t)?(o(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};n.forEach(["delete","get","head"],(function(t){c.headers[t]={}})),n.forEach(["post","put","patch"],(function(t){c.headers[t]=n.merge(s)})),t.exports=c},849:t=>{"use strict";t.exports=function(t,e){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return t.apply(e,r)}}},327:(t,e,r)=>{"use strict";var n=r(867);function a(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,r){if(!e)return t;var s;if(r)s=r(e);else if(n.isURLSearchParams(e))s=e.toString();else{var o=[];n.forEach(e,(function(t,e){null!=t&&(n.isArray(t)?e+="[]":t=[t],n.forEach(t,(function(t){n.isDate(t)?t=t.toISOString():n.isObject(t)&&(t=JSON.stringify(t)),o.push(a(e)+"="+a(t))})))})),s=o.join("&")}if(s){var i=t.indexOf("#");-1!==i&&(t=t.slice(0,i)),t+=(-1===t.indexOf("?")?"?":"&")+s}return t}},303:t=>{"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},372:(t,e,r)=>{"use strict";var n=r(867);t.exports=n.isStandardBrowserEnv()?{write:function(t,e,r,a,s,o){var i=[];i.push(t+"="+encodeURIComponent(e)),n.isNumber(r)&&i.push("expires="+new Date(r).toGMTString()),n.isString(a)&&i.push("path="+a),n.isString(s)&&i.push("domain="+s),!0===o&&i.push("secure"),document.cookie=i.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:t=>{"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},985:(t,e,r)=>{"use strict";var n=r(867);t.exports=n.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function a(t){var n=t;return e&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return t=a(window.location.href),function(e){var r=n.isString(e)?a(e):e;return r.protocol===t.protocol&&r.host===t.host}}():function(){return!0}},16:(t,e,r)=>{"use strict";var n=r(867);t.exports=function(t,e){n.forEach(t,(function(r,n){n!==e&&n.toUpperCase()===e.toUpperCase()&&(t[e]=r,delete t[n])}))}},109:(t,e,r)=>{"use strict";var n=r(867),a=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,r,s,o={};return t?(n.forEach(t.split("\n"),(function(t){if(s=t.indexOf(":"),e=n.trim(t.substr(0,s)).toLowerCase(),r=n.trim(t.substr(s+1)),e){if(o[e]&&a.indexOf(e)>=0)return;o[e]="set-cookie"===e?(o[e]?o[e]:[]).concat([r]):o[e]?o[e]+", "+r:r}})),o):o}},713:t=>{"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},867:(t,e,r)=>{"use strict";var n=r(849),a=Object.prototype.toString;function s(t){return"[object Array]"===a.call(t)}function o(t){return void 0===t}function i(t){return null!==t&&"object"==typeof t}function c(t){return"[object Function]"===a.call(t)}function p(t,e){if(null!=t)if("object"!=typeof t&&(t=[t]),s(t))for(var r=0,n=t.length;r<n;r++)e.call(null,t[r],r,t);else for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&e.call(null,t[a],a,t)}t.exports={isArray:s,isArrayBuffer:function(t){return"[object ArrayBuffer]"===a.call(t)},isBuffer:function(t){return null!==t&&!o(t)&&null!==t.constructor&&!o(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:i,isUndefined:o,isDate:function(t){return"[object Date]"===a.call(t)},isFile:function(t){return"[object File]"===a.call(t)},isBlob:function(t){return"[object Blob]"===a.call(t)},isFunction:c,isStream:function(t){return i(t)&&c(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:p,merge:function t(){var e={};function r(r,n){"object"==typeof e[n]&&"object"==typeof r?e[n]=t(e[n],r):e[n]=r}for(var n=0,a=arguments.length;n<a;n++)p(arguments[n],r);return e},deepMerge:function t(){var e={};function r(r,n){"object"==typeof e[n]&&"object"==typeof r?e[n]=t(e[n],r):e[n]="object"==typeof r?t({},r):r}for(var n=0,a=arguments.length;n<a;n++)p(arguments[n],r);return e},extend:function(t,e,r){return p(e,(function(e,a){t[a]=r&&"function"==typeof e?n(e,r):e})),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")}}},281:(t,e,r)=>{const n=r(669);var a=1;function s(t){return t?t.split(" ").join("_"):t}t.exports={setApiKey(t){a=t},getTeamByName:async t=>(t=s(t),(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchteams.php?t=${t}`)).data),getTeamByShortCode:async t=>(t=s(t),(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchteams.php?sname=${t}`)).data),getAllPlayersByTeam:async t=>(t=s(t),(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchplayers.php?t=${t}`)).data),async getPlayerByName(t,e){t=s(t),e=s(e);var r=[];return r.push(`p=${t}`),e&&r.push(`t=${e}`),(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchplayers.php?${r.join("&")}`)).data},async getEventByName(t,e){t=s(t),e=s(e);var r=[];return r.push(`e=${t}`),e&&r.push(`s=${e}`),(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchevents.php?${r.join("&")}`)).data},getSportsList:async()=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/all_sports.php`)).data,getLeagueList:async()=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/all_leagues.php`)).data,getCountryList:async()=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/all_countries.php`)).data,async getLeagueListByCountry(t,e){t=s(t),e=s(e);var r=[];return r.push(`c=${t}`),e&&r.push(`s=${e}`),(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/search_all_leagues.php?${r.join("&")}`)).data},getSeasonsInLeagueById:async t=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/search_all_seasons.php?id=${t}`)).data,getTeamsByLeagueName:async t=>(t=s(t),(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/search_all_teams.php?l=${t}`)).data),getTeamsByLeagueName:async t=>(t=s(t),(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/search_all_teams.php?l=${t}`)).data),getTeamsByCountryAndSport:async(t,e)=>(e=s(e),t=s(t),(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/search_all_teams.php?s=${t}&c=${e}`)).data),getPlayersByTeamId:async t=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookup_all_players.php?id=${t}`)).data,getUsersLoved:async t=>(t=s(t),(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/searchloves.php?u=${t}`)).data),getLeagueDetailsById:async t=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupleague.php?id=${t}`)).data,getTeamDetailsById:async t=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupteam.php?id=${t}`)).data,getPlayerDetailsById:async t=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupplayer.php?id=${t}`)).data,getEventDetailsById:async t=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupevent.php?id=${t}`)).data,getPlayerHonoursById:async t=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookuphonors.php?id=${t}`)).data,getPlayerFormerTeamsById:async t=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupformerteams.php?id=${t}`)).data,getPlayerContractsById:async t=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookupcontracts.php?id=${t}`)).data,getEventResultsById:async t=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventresults.php?id=${t}`)).data,getTvEventById:async t=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookuptv.php?id=${t}`)).data,getLookupTableByLeagueIdAndSeason:async(t,e)=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/lookuptable.php?l=${t}&s=${e}`)).data,getNext5EventsByTeamId:async t=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsnext.php?id=${t}`)).data,getNext15EventsByLeagueId:async t=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsnext.php?id=${t}`)).data,getPast5EventsByTeamId:async t=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventslast.php?id=${t}`)).data,getPast15EventsByLeagueId:async t=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventspastleague.php?id=${t}`)).data,getEventsInRound:async(t,e,r)=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsround.php?id=${t}&r=${e}&s=${r}`)).data,async getEventsOnDay(t,e,r){e=s(e),r=s(r);var o=[];return t&&o.push(`d=${t}`),r&&o.push(`l=${r}`),e&&o.push(`s=${e}`),(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsday.php?${o.join("&")}`)).data},async getTvEventsOnDay(t,e,r){e=s(e),r=s(r);var o=[];return t&&o.push(`d=${t}`),r&&o.push(`a=${league}`),e&&o.push(`s=${e}`),(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventstv.php?${o.join("&")}`)).data},getTvEventsByChannel:async t=>(t=s(t),(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventstv.php?c=${t}`)).data),getEventsByLeagueIdAndSeason:async(t,e)=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsseason.php?id=${t}&s=${e}`)).data,getImage:async t=>(await n.get(`https://www.thesportsdb.com/images/media/league/fanart/${t}.jpg`)).data,getPreviewImage:async t=>(await n.get(`https://www.thesportsdb.com/images/media/league/fanart/${t}.jpg/preview`)).data,async getYoutubeEventHighligts(t,e,r){e=s(e),r=s(r);var o=[];return t&&o.push(`d=${t}`),e&&o.push(`l=${e}`),r&&o.push(`s=${r}`),(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventshighlights.php?${o.join("&")}`)).data},getAllEventsByLeagueIdAndSeason:async(t,e)=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/eventsseason.php?id=${t}&s=${e}`)).data,getSoccerLivescores:async()=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/latestsoccer.php`)).data,getLivescoresBySport:async t=>(t=s(t),(await n.get(`https://www.thesportsdb.com/api/v2/json/${a}/livescore.php?s=${t}`)).data),getGolfLivescores:async()=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/latestgolf.php`)).data,getBasketballLivescores:async()=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/latestbasketball.php`)).data,getAmericanFootballLivescores:async()=>(await n.get(`https://www.thesportsdb.com/api/v1/json/${a}/latestamericanfootball.php`)).data}}},e={};function r(n){var a=e[n];if(void 0!==a)return a.exports;var s=e[n]={exports:{}};return t[n](s,s.exports,r),s.exports}(()=>{"use strict";var t,e,n=r(281);e=function(){var t,e,r;return function(t,e){var r,n,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(a=2&s[0]?n.return:s[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,s[1])).done)return a;switch(n=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,n=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){o.label=s[1];break}if(6===s[0]&&o.label<a[1]){o.label=a[1],a=s;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(s);break}a[2]&&o.ops.pop(),o.trys.pop();continue}s=e.call(t,o)}catch(t){s=[6,t],n=0}finally{r=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}}(this,(function(a){switch(a.label){case 0:return[4,(s=void 0,o=void 0,i=void 0,c=function(){var t;return function(t,e){var r,n,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(a=2&s[0]?n.return:s[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,s[1])).done)return a;switch(n=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,n=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){o.label=s[1];break}if(6===s[0]&&o.label<a[1]){o.label=a[1],a=s;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(s);break}a[2]&&o.ops.pop(),o.trys.pop();continue}s=e.call(t,o)}catch(t){s=[6,t],n=0}finally{r=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}}(this,(function(e){switch(e.label){case 0:return t=[],n.setApiKey(2),[4,n.getLeagueListByCountry("Brazil","Soccer")];case 1:return e.sent().countries.forEach((function(e){t.push(e.strLeague)})),[2,t]}}))},new(i||(i=Promise))((function(t,e){function r(t){try{a(c.next(t))}catch(t){e(t)}}function n(t){try{a(c.throw(t))}catch(t){e(t)}}function a(e){var a;e.done?t(e.value):(a=e.value,a instanceof i?a:new i((function(t){t(a)}))).then(r,n)}a((c=c.apply(s,o||[])).next())})))];case 1:return t=a.sent(),(e=document.createElement("div")).className="tabs-container",r=document.createElement("ul"),t.forEach((function(e){var n=document.createElement("li"),a=document.createElement("button");a.tabIndex=t.indexOf(e),a.textContent=e,n.appendChild(a),r.appendChild(n)})),e.appendChild(r),document.body.appendChild(e),[2]}var s,o,i,c}))},new((t=void 0)||(t=Promise))((function(r,n){function a(t){try{o(e.next(t))}catch(t){n(t)}}function s(t){try{o(e.throw(t))}catch(t){n(t)}}function o(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(t){t(n)}))).then(a,s)}o((e=e.apply(void 0,[])).next())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,